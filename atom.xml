<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seven</title>
  <icon>https://www.gravatar.com/avatar/2280aa8c6c5934d7c62169000e259fd6</icon>
  
  <link href="https://cnlmx.top/atom.xml" rel="self"/>
  
  <link href="https://cnlmx.top/"/>
  <updated>2022-01-16T14:12:47.203Z</updated>
  <id>https://cnlmx.top/</id>
  
  <author>
    <name>Eric</name>
    <email>iyEric@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SEO 优化</title>
    <link href="https://cnlmx.top/post/seo/"/>
    <id>https://cnlmx.top/post/seo/</id>
    <published>2021-06-03T03:03:43.000Z</published>
    <updated>2022-01-16T14:12:47.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在搜索引擎网站的后台会有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址是被“网络爬虫”程序（又叫“搜索引擎蜘蛛”）从茫茫互联网中下载收集而来的。</p><p>随着各种各样网站的出现，爬虫程序每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词，如果爬虫认为关键词词在数据库中没有，但对用户是又有用的，便存入后台的数据库中。</p><p>反之，如果爬虫认为是垃圾信息或重复信息，就舍弃不要，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。</p><p>当用户搜索时，就能检索出与关键字相关的网址显示给访客。</p><p>一个关键词对用多个网址，因此就出现了排序的问题。相应地，当与关键词最吻合的网址就会排在前面了。</p><p>在爬虫抓取网页内容，提炼关键词的这个过程中，就存在一个问题：爬虫能否看懂。</p><p>如果网站内容是 flash 和 js 等，那么它是看不懂的，会犯迷糊，即使关键字再贴切也没用。</p><p>相应的，如果网站内容可以被搜索引擎能识别，那么搜索引擎就会提高该网站的权重，增加对该网站的友好度。</p><p>这样一个过程我们称之为 SEO。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>SEO(Search Engine Optimization)，即搜索引擎优化。</p><p>SEO 是随着搜索引擎的出现而来的，两者是相互促进，互利共生的关系。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>提升网站在搜索引擎中的权重，增加对搜索引擎的友好度，使得用户在访问网站时能排在前面。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="白帽-SEO"><a href="#白帽-SEO" class="headerlink" title="白帽 SEO"></a>白帽 SEO</h3><p>通过对网站结构、性能、以及页面代码方面的优化，使网站对搜索引擎和用户更加友好，起到了改良和规范网站设计的作用，并且网站也能从搜索引擎中获取合理的流量，这是搜索引擎鼓励和支持的。</p><h3 id="黑帽-SEO"><a href="#黑帽-SEO" class="headerlink" title="黑帽 SEO"></a>黑帽 SEO</h3><p>利用和放大搜索引擎政策缺陷，来获取更多用户的访问量，这类行为大多是欺骗搜索引擎，一般搜索引擎公司是不支持与鼓励的。</p><h2 id="优化方向"><a href="#优化方向" class="headerlink" title="优化方向"></a>优化方向</h2><p>对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的。</p><p>优化内容与关键字的对应，增加关键字的密度。</p><p>在网站上合理设置 Robots.txt 文件。</p><p>生成针对搜索引擎友好的网站地图。</p><p>增加外部链接，到各个网站上宣传。</p><blockquote><p>前端是构建网站中很重要的一个环节，前端的工作主要是负责页面的 HTML + CSS + JS，优化好这几个方面会为 SEO 工作打好一个坚实的基础。</p></blockquote><h1 id="前端-SEO-优化措施"><a href="#前端-SEO-优化措施" class="headerlink" title="前端 SEO 优化措施"></a>前端 SEO 优化措施</h1><h2 id="网站结构优化"><a href="#网站结构优化" class="headerlink" title="网站结构优化"></a>网站结构优化</h2><p>一般而言，建立的网站结构层次越少，越容易被爬虫抓取，也就容易被收录。</p><h3 id="控制首页链接数量"><a href="#控制首页链接数量" class="headerlink" title="控制首页链接数量"></a>控制首页链接数量</h3><p>网站首页是权重最高的地方。</p><p>如果首页链接太少，没有“桥”，爬虫不能继续往下爬到内页，直接影响网站收录数量。</p><p>但是首页链接也不能太多，一旦太多，没有实质性的链接，很容易影响用户体验，也会降低网站首页的权重，收录效果也不好。</p><h3 id="扁平化目录"><a href="#扁平化目录" class="headerlink" title="扁平化目录"></a>扁平化目录</h3><p>一般中小型网站目录结构超过 3 级，爬虫便不愿意往下爬了。</p><p>并且如果访客经过跳转 3 次还没找到需要的信息，很可能离开。</p><p>尽量让爬虫只要跳转 3 次，就能到达网站内的任何一个内页。</p><h3 id="导航优化"><a href="#导航优化" class="headerlink" title="导航优化"></a>导航优化</h3><p>尽量采用文字方式，也可以搭配图片导航，但是图片代码一定要进行优化，标签必须添加“alt”和“title”属性，告诉搜索引擎导航的定位，做到即使图片未能正常显示时，用户也能看到提示文字。</p><p>在每一个网页上应该加上面包屑导航。</p><ol><li>从用户体验方面来说，可以让用户了解当前所处的位置以及当前页面在整个网站中的位置，帮助用户很快了解网站组织形式，从而形成更好的位置感，同时提供了返回各个页面的接口，方便用户操作</li><li>对爬虫而言，能够清楚的了解网站结构，同时还增加了大量的内部链接，方便抓取，降低跳出率。</li></ol><h3 id="页面布局优化"><a href="#页面布局优化" class="headerlink" title="页面布局优化"></a>页面布局优化</h3><h4 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h4><p>logo 及主导航，以及用户的信息。</p><h4 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h4><p>左边正文，包括面包屑导航及正文。右边放热门文章及相关文章。</p><p>目的：</p><ol><li>留住访客，让访客多停留。</li><li>对爬虫而言，这些文章属于相关链接，增强了页面相关性，也能增强页面的权重。</li></ol><h4 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h4><p>版权信息和友情链接。</p><h3 id="重要代码放最前"><a href="#重要代码放最前" class="headerlink" title="重要代码放最前"></a>重要代码放最前</h3><p>搜索引擎抓取 HTML 内容是从上到下，利用这一特点，可以让主要代码优先读取，广告等不重要代码放在下边。</p><p>例如，在左栏和右栏的代码不变的情况下，只需改一下样式，利用 <code>float:left;</code> 和 <code>float:right;</code> 就可以随意让两栏在展现上位置互换，这样就可以保证重要代码在最前，让爬虫最先抓取。同样也适用于多栏的情况。</p><h3 id="控制页面大小"><a href="#控制页面大小" class="headerlink" title="控制页面大小"></a>控制页面大小</h3><p>一个页面最好不要超过 100k，太大的话页面加载速度会变慢。</p><p>当速度很慢时，用户体验不好，留不住访客，并且一旦超时，爬虫也会离开。</p><h2 id="页面代码优化"><a href="#页面代码优化" class="headerlink" title="页面代码优化"></a>页面代码优化</h2><h3 id="突出重要内容"><a href="#突出重要内容" class="headerlink" title="突出重要内容"></a>突出重要内容</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p><code>title</code> 标签：只强调重点即可，尽量把重要的关键词放在前面，关键词不要重复出现，尽量做到每个页面的 <code>&lt;title&gt;</code> 标题中不要设置相同的内容。 </p><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p><code>keywords</code>：关键词，使用英文逗号隔开，列举出几个页面的重要关键字即可，切记过分堆砌。</p><h4 id="页面描述"><a href="#页面描述" class="headerlink" title="页面描述"></a>页面描述</h4><p><code>description</code>：页面描述，需要高度概括网页内容，切记不能太长，过分堆砌关键词，每个页面也要有所不同。</p><h3 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h3><p>语义化书写 HTML 代码，符合 W3C 标准。</p><p>尽量让代码语义化，在适当的位置使用适当的标签，用正确的标签做正确的事。</p><p>让阅读源码者和爬虫都一目了然。</p><p>比如：h1- h6 用于标题类，nav 标签用来设置页面主导航，列表形式的代码使用 ul 或 ol，重要的文字使用 strong 等。</p><h3 id="链接规范化"><a href="#链接规范化" class="headerlink" title="链接规范化"></a>链接规范化</h3><p>页内链接添加 <code>title</code> 属性加以说明。</p><p>外部链接加 <code>el=&quot;nofollow&quot;</code> 属性，告诉爬虫不要去，因为一旦爬虫爬了外部链接，就不会再回来了。</p><h3 id="h-标签"><a href="#h-标签" class="headerlink" title="h 标签"></a>h 标签</h3><p>h1 标签自带权重，一个页面有且最多只能有一个，是该页面最重要的标题。没有标题就放 logo。</p><p>从 h1 开始逐级往下添加，合理使用 h 标签能使页面结构更加清晰、层次更加完备。</p><h3 id="alt-属性"><a href="#alt-属性" class="headerlink" title="alt 属性"></a>alt 属性</h3><p>图片添加 alt 属性，当网络速度很慢，或者图片地址失效时， alt 属性可以让用户知道这个图片的作用。</p><p>同时为图片设置高度和宽度，可提高页面的加载速度。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>表格应该使用表格标题标签</strong>：caption 元素定义表格标题。caption 标签必须紧随 table 标签之后。</p><p><strong>重要内容不要用 js 输出</strong>：爬虫不会读取 js 里的内容，所以重要内容必须放在 HTML 里。</p><p><strong>少使用 iframe 框架</strong>：爬虫一般不会读取其中的内容。</p><p><strong>谨慎使用 display:none 属性</strong>：对于不想显示的文字内容，应当设置 z-index 或缩进设置成足够大的负数偏离出浏览器之外。因为搜索引擎会过滤掉 <code>display:none</code> 其中的内容。</p><h2 id="网站性能优化"><a href="#网站性能优化" class="headerlink" title="网站性能优化"></a>网站性能优化</h2><h3 id="减少-http-请求数量"><a href="#减少-http-请求数量" class="headerlink" title="减少 http 请求数量"></a>减少 http 请求数量</h3><p>在浏览器与服务器进行通信时，主要是通过 HTTP 进行通信。浏览器与服务器需要经过三次握手，每次握手需要花费大量时间。</p><p>而且不同浏览器对资源文件并发请求数量有限（不同浏览器允许并发数），一旦 HTTP 请求数量达到一定数量，资源请求就存在等待状态，这是很致命的，因此减少 HTTP 的请求数量可以很大程度上对网站性能进行优化。</p><p>CSS Sprite：将多张图片合并成一张图片达到减少 HTTP 请求的一种解决方案，可以通过 CSS 的 background 属性来访问图片内容。这种方案同时还可以减少图片总字节数。</p><p>合并 css 和 js 文件：使用工程化打包工具如：grunt、gulp、webpack，在发布前将多个 css 或者多个 js 合并成一个文件。</p><p>采用 lazyload：懒加载，网页上的内容在一开始无需加载，不需要发请求，等到用户操作真正需要的时候立即加载出内容。这样就控制了网页资源一次性请求数量。</p><h3 id="控制资源文件加载优先级"><a href="#控制资源文件加载优先级" class="headerlink" title="控制资源文件加载优先级"></a>控制资源文件加载优先级</h3><p>浏览器在加载 HTML 内容时，是将 HTML 内容从上至下依次解析，解析到 link 或者 script 标签就会加载 href 或者 src 对应链接内容，为了第一时间展示页面给用户，就需要将 CSS 提前加载，不要受 JS 加载影响。</p><p>一般情况下都是 CSS 在头部，JS 在底部。</p><h3 id="结构行为样式相分离"><a href="#结构行为样式相分离" class="headerlink" title="结构行为样式相分离"></a>结构行为样式相分离</h3><p>尽量外链 CSS 和 JS，保证网页代码的整洁，也有利于日后维护。</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>将网络资源存储在本地，等待下次请求该资源时，如果资源已经存在就不需要到服务器重新请求该资源，直接在本地读取该资源。</p><h3 id="减少重排"><a href="#减少重排" class="headerlink" title="减少重排"></a>减少重排</h3><p>基本原理：DOM 的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证 DOM 树上的所有其它结点的 visibility 属性。</p><p>如果 reflow 的过于频繁，CPU 使用率就会急剧上升。</p><p>减少 reflow，如果需要在 DOM 操作时添加样式，尽量使用增加 class 属性，而不是通过 style 操作样式。</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p><strong>减少 DOM 操作</strong></p><p><strong>使用 CDN 网络缓存</strong>：加快用户访问速度，减轻服务器压力。</p><p><strong>启用 GZIP 压缩</strong>：浏览速度变快，搜索引擎的爬虫抓取信息量也会增大。</p><p><strong>伪静态设置</strong>：如果是动态网页，可以开启伪静态功能，让爬虫“误以为”这是静态网页，因为静态网页比较合爬虫的胃口，如果 url 中带有关键词效果更好。</p><p>转载自：<a href="https://juejin.cn/post/6844903824428105735">https://juejin.cn/post/6844903824428105735</a></p>]]></content>
    
    
    <summary type="html">前端 SEO 优化探讨</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/"/>
    
    
    <category term="HTML" scheme="https://cnlmx.top/tags/HTML/"/>
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="优化" scheme="https://cnlmx.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>理解 HTML 语义化</title>
    <link href="https://cnlmx.top/post/semantic/"/>
    <id>https://cnlmx.top/post/semantic/</id>
    <published>2021-06-01T07:20:17.000Z</published>
    <updated>2022-01-16T14:12:47.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><blockquote><p>什么是语义化？</p></blockquote><p>语义化就是用正确的标签做正确的事情、表达正确的意思。</p><p>一份好的 HTML 代码，应该是正确嵌套、语义明确、结构清晰、合理缩进加必要的注释。</p><p>重点：<strong>根据网页中内容的结构，选择适合的 HTML 标签进行编写</strong>。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><blockquote><p>为什么要语义化？</p></blockquote><p>提升 SEO 优化，有助于爬虫抓取更多的有效信息。</p><p>在没有 CSS 的情况下，也能呈现较好的内容结构与代码结构。</p><p>便于团队开发和维护，减少开发者之间的沟通成本。</p><p>方便机器更好的识别和解析（比如搜索引擎、针对视障用户的屏幕阅读器等）。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>举例说明。</p></blockquote><p>HTML5 提供了大量用于提升段落文本语义的标签。</p><p>比如布局标签：</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>定义页眉</td></tr><tr><td>nav</td><td>定义导航</td></tr><tr><td>main</td><td>定义文档主要内容</td></tr><tr><td>section</td><td>定义节</td></tr><tr><td>article</td><td>定义文章</td></tr><tr><td>aside</td><td>定义与页面内容关联度较低的内容</td></tr><tr><td>footer</td><td>定义页面或章节的尾部</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">关于 HTML 语义化的理解</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/"/>
    
    
    <category term="HTML" scheme="https://cnlmx.top/tags/HTML/"/>
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Webpack 5.x 搭建一个项目</title>
    <link href="https://cnlmx.top/post/webpack/"/>
    <id>https://cnlmx.top/post/webpack/</id>
    <published>2021-04-01T02:53:29.000Z</published>
    <updated>2022-01-16T14:12:46.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="使用版本"><a href="#使用版本" class="headerlink" title="使用版本"></a>使用版本</h2><p>2020 年 10 月 10 日，Webpack 5 正式发布。</p><p>本文撰写之初，所使用版本：</p><ol><li>Webpack 5.28.0</li><li>Webpack-cli 4.6.0</li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>以项目 2048 为例，简单划分如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── config                 # 配置目录</span><br><span class="line">│   ├── webpack.common.js</span><br><span class="line">│   ├── webpack.dev.js</span><br><span class="line">│   └── webpack.prod.js</span><br><span class="line">│</span><br><span class="line">├── dist                   # 编译目录</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   └── main.js</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">│</span><br><span class="line">├── src                    # 源码目录</span><br><span class="line">│   └── index.js</span><br><span class="line">│</span><br><span class="line">├── favicon.ico</span><br><span class="line">│</span><br><span class="line">├── index.html</span><br><span class="line">│</span><br><span class="line">├── package-lock.json</span><br><span class="line">│</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>创建一个空的目录并进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir 2048_game</span><br><span class="line"><span class="built_in">cd</span> 2048_game</span><br></pre></td></tr></table></figure><p>然后进行初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或全部使用默认值</span></span><br><span class="line"></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>执行初始化命令后，终端会进行一些简单问题的询问，比如项目名称、作者信息等，以此来创建 package.json 文件，后续可以在该文件内进行修改。</p><p>指令后加上 <code>-y</code>，表示所有选项都为 yes，全部使用默认值。</p><h1 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h1><p>webpack：核心包，包含了 webpack 构建过程中要用到的所有 api。</p><p>webpack-cli：提供一个简单的 cli 命令，它调用了 webpack 核心包的 api，来完成构建过程。</p><p>安装 webpack、webpack-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm i webpack webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部安装</span></span><br><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>命令完成后，项目中会多一个 node_modules 文件夹，用来存放项目中安装的依赖包。</p><p>补充：<code>install</code> 可简写为 <code>i</code>，<code>--save-dev</code> 可简写为 <code>-D</code></p><h1 id="完善项目目录"><a href="#完善项目目录" class="headerlink" title="完善项目目录"></a>完善项目目录</h1><h2 id="三个重要目录"><a href="#三个重要目录" class="headerlink" title="三个重要目录"></a>三个重要目录</h2><p><code>src</code>：source，源码文件，用于存放我们写的源文件</p><p><code>dist</code>：distribution，编译文件，用于存放之后打包的文件</p><p><code>config</code>：配置文件（这个用于后面的配置文件分离）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir config dist src</span><br></pre></td></tr></table></figure><h2 id="项目入口文件"><a href="#项目入口文件" class="headerlink" title="项目入口文件"></a>项目入口文件</h2><p>根目录下：<code>index.html</code></p><p>src 目录下：<code>index.js</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch index.html</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> src &amp;&amp; touch index.js</span><br></pre></td></tr></table></figure><h2 id="原始配置文件"><a href="#原始配置文件" class="headerlink" title="原始配置文件"></a>原始配置文件</h2><p>回到根目录，创建配置文件 <code>webpack.config.js</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line">touch webpack.config.js</span><br></pre></td></tr></table></figure><h1 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h1><h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><p>打开 <code>webpack.config.js</code>，先进行基本的配置：</p><ol><li><code>entry</code>：入口文件</li><li><code>output</code>：打包后的文件名和存放目录</li><li><code>mode</code>：编译模式，先设置为开发环境</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，让我们输入打包指令来尝试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>编译完成，打开 <code>dist</code> 目录，就会发现多了一个 js 文件夹，里面就是打包输出的 <code>man.js</code> 文件。</p><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><p>接下来我们配置一个本地开发服务器，可以让浏览器进行实时刷新，查看修改结果。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code> 中进行配置：</p><ol><li><code>contentBase</code>：为哪一个文件夹提供本地服务，默认是根文件夹</li><li><code>inline</code>：启动页面实时刷新</li><li><code>compress</code>：启动 gzip 压缩，让文件更小，打开速度更快</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure><p>可以看到它提供了一个本地网址：<code>http://localhost:8080</code>。打开该网址，就可以实时查看页面了。</p><p>注意，这个只用于开发环境方便调试，在生产环境是不需要的。</p><h2 id="loader配置"><a href="#loader配置" class="headerlink" title="loader配置"></a>loader配置</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>loader 主要用于转换某些类型的模块，它是一个转换器。</p><p>对于 webpack 本身的能力来说，它只能理解 JavaScript，而对于其他转化是不支持的，比如加载 css、图片，将 ES6 转成 ES5 代码等，此时就需要通过 loader 了。</p><p>配置参数：</p><ol><li><code>test</code>：匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li><li><code>loader</code>：loader 的名称（必须）</li><li><code>include/exclude</code>：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）</li><li><code>options</code>：为 loader 提供额外的设置选项（可选）</li></ol><p>使用：</p><ol><li>下载：npm 安装需要使用的 loader</li><li>配置：在 <code>webpack.config.js</code> 中的 <code>module</code> 关键字下进行配置</li></ol><p>某个文件类型使用多个<code>loader</code>时，执行顺序从右往左。</p><h3 id="样式资源"><a href="#样式资源" class="headerlink" title="样式资源"></a>样式资源</h3><p>loader：<code>css-loader</code>、<code>style-loader</code></p><p>如果还要使用预处理器比如 less，那就还需要 <code>less-loader</code> 和 <code>less</code></p><p>作用：</p><ol><li><code>css-loader</code>：将 css 文件变成 commonjs 模块加载到 js 中，里面内容是样式字符串。</li><li><code>style-loader</code>：创建一个 <code>&lt;style&gt;</code> 标签，将 js 中的样式资源插入进去，然后添加到 <code>&lt;head&gt;</code> 中生效。</li><li><code>less-loader</code>：加载和转译 less 文件。</li></ol><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果还有 less 文件需处理</span></span><br><span class="line">npm i less less-loader -D</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>webpack5 新增了资源模块类型(asset module type)，通过添加 4 种新的模块类型，替换了三个 loader：</p><ol><li><code>asset/resource</code>：发送一个单独的文件并导出 URL。替代了 <code>file-loader</code></li><li><code>asset/inline</code>：导出一个资源的 data URI。替代了 <code>url-loader</code></li><li><code>asset/source</code>：导出资源的源代码。替代了 <code>raw-loader</code></li><li><code>asset</code>：在导出一个 data URI 和发送一个单独的文件之间自动选择：<ul><li>小于 8kb 的文件，将会视为 <code>inline</code> 模块类型</li><li>否则会被视为 <code>resource</code> 模块类型。</li><li>之前是通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li></ul></li></ol><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif|svg|webp)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;static/img/[hash][ext][query]&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;static/fonts/[hash][ext][query]&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="img-标签图片"><a href="#img-标签图片" class="headerlink" title="img 标签图片"></a>img 标签图片</h3><p>loader：<code>html-withimg-loader</code></p><p>静态资源模块处理的是 <code>css</code> 和 <code>js</code> 中的图片路径，但是它并不处理 <code>html</code> 中的图片路径。</p><p>所以我们还需要下载一个 loader 来处理。</p><p>作用：处理 html 文件的 img 图片。它负责引入图片，从而能被静态资源模块处理。</p><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-withimg-loader -D</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;html-withimg-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js语法兼容"><a href="#js语法兼容" class="headerlink" title="js语法兼容"></a>js语法兼容</h3><p>loader：<code>babel-loader</code>、<code>@babel/core</code>、<code>@babel/preset-env</code></p><p>作用：用来处理 ES6 语法，将其编译为浏览器可以执行的 js 语法。</p><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示 babel 做怎样的兼容性处理</span></span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>@babel/preset-env</code> 只能转换基本语法，高级 API 比如 promise 就不能转换了。</p><p>高级语法按需加载处理：</p><ol><li>下载开发依赖（<code>-D</code>）：<code>@babel/plugin-transform-runtime</code></li><li>下载生产依赖：<code>@babel/runtime-corejs3</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/plugin-transform-runtime -D</span><br><span class="line"></span><br><span class="line">npm install @babel/runtime-corejs3</span><br></pre></td></tr></table></figure><p>然后修改配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">corejs</span>: &#123;</span><br><span class="line">                <span class="attr">version</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">proposals</span>: <span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">useESModules</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>plugin 是对 webpack 现有功能的各种扩展，比如打包优化，文件压缩等。</p><h3 id="打包-html-文件"><a href="#打包-html-文件" class="headerlink" title="打包 html 文件"></a>打包 html 文件</h3><p>目前我们的 <code>index.html</code> 文件是存放在项目的根目录下的。</p><p>在真实发布项目时，发布的是 <code>dist</code> 文件夹中的内容，但是现在 <code>dist</code> 文件夹中还没有 <code>index.html</code> 文件，所以我们需要先把它打包进来。</p><p>作用：</p><ol><li>自动生成一个 index.html 文件</li><li>将打包的 js 文件，自动通过 <code>script</code> 标签插入到 <code>body</code> 中</li></ol><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>配置：</p><ol><li><code>template</code>：根据什么模板来生成 index.html 文件。</li><li><code>favicon</code>：网站的 icon。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">favicon</span>: <span class="string">&#x27;favicon.ico&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站图标 favicon 文件需放在根目录下，不需要在源文件里引入，它会自动寻找并打包。</p><p>重新打包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>然后打开 <code>dist</code> 文件夹，就可以看到多出来一个 <code>index.html</code> 和 <code>favicon.ico</code>文件了。</p><h3 id="自动清理-dist-目录"><a href="#自动清理-dist-目录" class="headerlink" title="自动清理 dist 目录"></a>自动清理 dist 目录</h3><p>之后每次构建都会重新进行打包，所以需要先清除旧文件，再生成新文件。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> CleanWebpackPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后每次打包之前，都会先删除旧文件。</p><h3 id="优化输出日志"><a href="#优化输出日志" class="headerlink" title="优化输出日志"></a>优化输出日志</h3><p>打包编译时，很大一部分输出信息是无效信息，所以可以通过插件进行优化，让终端看起来更简洁明了。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @soda/friendly-errors-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>配置：</p><ol><li><code>devServer</code> 中增加：<code>quiet: true</code></li><li>增加 <code>stats</code> 属性，让日志只在报错时显示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FriendlyErrorsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;@soda/friendly-errors-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> FriendlyErrorsWebpackPlugin(&#123;&#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">quiet</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">stats</span>: <span class="string">&#x27;errors-only&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以上就是使用 webpack5 搭建一个项目的基本配置了，后续还有进阶配置，比如生产环境和开发环境的分离，还有不同环境下的优化配置，我们在下篇文章继续讨论。</p>]]></content>
    
    
    <summary type="html">Webpack 搭建前端项目</summary>
    
    
    
    <category term="工具" scheme="https://cnlmx.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Webpack" scheme="https://cnlmx.top/categories/%E5%B7%A5%E5%85%B7/Webpack/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工具" scheme="https://cnlmx.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Webpack" scheme="https://cnlmx.top/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 增加 Google 收录</title>
    <link href="https://cnlmx.top/post/sitemap/"/>
    <id>https://cnlmx.top/post/sitemap/</id>
    <published>2020-05-01T03:43:20.000Z</published>
    <updated>2022-01-16T14:12:47.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客搭建完成后，一直疏于维护，直到最近开始重新管理，然后发现 Google 没有收录，所以决定自己提交申请。</p></blockquote><h2 id="根目录配置"><a href="#根目录配置" class="headerlink" title="根目录配置"></a>根目录配置</h2><p>博客根目录下执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p><code>_config.yml</code>末尾添加如下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成 sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span> </span><br><span class="line"><span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>_config.yml</code>中查找如下代码，把 url 改为自己的博客地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://cnlmx.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><blockquote><p>注意是博客根目录下的<code>_config.yml</code>文件。</p></blockquote><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><blockquote><p>查看博客根目录下的 public 文件夹，如果发现<code>sitemap.xml</code>文件即生成成功。</p></blockquote><p>在根目录<code>source</code>文件夹下增加<code>robots.txt</code>文件，<code>Sitemap</code>修改为自己的链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /home/</span><br><span class="line">Allow: /about/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://cnlmx.github.io/sitemap.xml</span><br></pre></td></tr></table></figure><blockquote><p>robots.txt 可以告诉搜索引擎哪些网页可以收录，哪些不允许收录。</p></blockquote><h2 id="Google-站长工具配置"><a href="#Google-站长工具配置" class="headerlink" title="Google 站长工具配置"></a>Google 站长工具配置</h2><p>进入<a href="https://search.google.com/search-console/about">Google Search Console</a>，点击立即使用，登录谷歌账号。</p><p>添加资源，选择资源类型：网址前缀，输入博客地址，然后点击继续。</p><img src="https://gitee.com/izxcvw/blog/raw/master/img/googles01.webp" style="width: 65%;margin-left:0"><p>验证所有权，选择 HTML 标记验证，点击复制。</p><img src="https://gitee.com/izxcvw/blog/raw/master/img/googles02.jpg" style="width: 60%;margin-left:0"><h2 id="主题文件配置"><a href="#主题文件配置" class="headerlink" title="主题文件配置"></a>主题文件配置</h2><p><code>_config.yml</code>文件中找到<code>google_site_verification</code>，设置为<code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####    站長驗證    ####</span></span><br><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意是主题目录下的<code>_config.yml</code>文件。</p></blockquote><p>配置<code>themes/Butterfly/layout/includes/head/site_verification.pug</code>文件，用之前复制的代码替换第二行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if theme.google_site_verification</span><br><span class="line">meta(name=&quot;google-site-verification&quot; content=theme.google_site_verification)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成静态文件并部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>打开博客首页，开启控制台查看<code>&lt;head&gt;</code>标签是否加入了 Google 的验证标记。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;G_wF-veta_pkYSiXBTlXtpO4vVoCyOOkoLA_ZKlHyIs&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>确保验证标记出现，回到 Google 的验证页面，点击验证。</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>验证完成后，点击站点地图，添加新的站点地图，即之前生成的<code>sitemap.xml</code>，点击提交。</p><img src="https://gitee.com/izxcvw/blog/raw/master/img/googles03.webp" style="width: 70%;margin-left:0"><blockquote><p>至此，就可以安心等待 Google 进行收录了。</p></blockquote>]]></content>
    
    
    <summary type="html">Google Search Console 收录博客网址</summary>
    
    
    
    <category term="Blog" scheme="https://cnlmx.top/categories/Blog/"/>
    
    <category term="Hexo" scheme="https://cnlmx.top/categories/Blog/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://cnlmx.top/tags/Hexo/"/>
    
    <category term="Blog" scheme="https://cnlmx.top/tags/Blog/"/>
    
    <category term="Google" scheme="https://cnlmx.top/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(八)零散知识</title>
    <link href="https://cnlmx.top/post/c545/"/>
    <id>https://cnlmx.top/post/c545/</id>
    <published>2019-10-20T06:10:12.000Z</published>
    <updated>2022-01-16T14:12:47.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决命名冲突"><a href="#解决命名冲突" class="headerlink" title="解决命名冲突"></a>解决命名冲突</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在实际开发中，往往是由很多工程师共同完成一个项目。工程师各自负责不同的功能开发，最后整合代码到一起。</p><p>整合代码时，就有可能出现各种各样的冲突。比如 HTML 的冲突，CSS 的冲突，还有 JavaScript 功能的冲突。</p><p>其中，JavaScript 不同功能的代码块中各自定义的变量，由于整合到一起，所以会出现互相冲突或直接覆盖的问题。</p><p>为了避免变量命名冲突，出现了以下几种方法。</p><h3 id="方法一：命名空间-Namespace"><a href="#方法一：命名空间-Namespace" class="headerlink" title="方法一：命名空间 Namespace"></a>方法一：命名空间 Namespace</h3><p>为项目或库创建一个全局对象，然后将所有功能添加到该全局变量中，减少程序中全局变量的数量，实现单全局变量。这样避免了在具有大量函数、对象和其他变量的情况下造成全局污染，也解决了命名冲突等问题。</p><p>定义一个全局对象，它在主域的 JavaScript 中。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> org = &#123;&#125;</span><br></pre></td></tr></table></figure><p>全局对象里又包含多个对象。这些对象中存储每个功能的变量，这样就能区分开各功能模块的变量。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> org = &#123;</span><br><span class="line">    <span class="attr">department1</span>: &#123;</span><br><span class="line">        <span class="attr">tuan</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dou</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">department2</span>: &#123;</span><br><span class="line">        <span class="attr">piao</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;c&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要使用这些变量：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = org.department1.tuan;<span class="comment">// 简化引用值名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tuan.name); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><p>这是个比较早期采用的方法，现在不再使用了。</p><h3 id="方法二：闭包"><a href="#方法二：闭包" class="headerlink" title="方法二：闭包"></a>方法二：闭包</h3><p>运用闭包和立即执行函数。</p><p>把特定的功能写进去，然后留出一个接口，方便后续调用。</p><p>这个接口就是 return 出去的函数，这个函数里放入功能函数的调用。</p><p>功能函数会使用立即执行函数里的私有化变量。</p><p>return 的函数作为一个中转站存在。</p><p>好处：不污染全局变量，也不影响各自的功能实现。</p><p>例如：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;origin&#x27;</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> init = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;piao&#x27;</span>; <span class="comment">// 私有化变量，不污染全局变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">useName</span>) </span>&#123;</span><br><span class="line">        name = useName;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 留出接口，调用上面特定的功能</span></span><br><span class="line">        callName(); <span class="comment">// 功能函数调用</span></span><br><span class="line">        changeName(<span class="string">&#x27;dou&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">init(); <span class="comment">// piao dou</span></span><br></pre></td></tr></table></figure><h3 id="方法三：webpack"><a href="#方法三：webpack" class="headerlink" title="方法三：webpack"></a>方法三：webpack</h3><h2 id="链式调用（模仿-jQuery）"><a href="#链式调用（模仿-jQuery）" class="headerlink" title="链式调用（模仿 jQuery）"></a>链式调用（模仿 jQuery）</h2><p>jQuery 链式调用：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>).width(<span class="number">100</span>).height(<span class="number">100</span>).html(<span class="number">123</span>).css(<span class="string">&#x27;position&#x27;</span>, <span class="string">&#x27;absolute&#x27;</span>).css(<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;100px&#x27;</span>).css(<span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;100px&#x27;</span>);</span><br></pre></td></tr></table></figure><p>对象内的方法调用：</p><ul><li>函数内没有<code>return</code>语句时，默认会返回<code>undefined</code>值。</li><li><code>tuan.eat()</code>调用完成后，如果接着调用<code>.drink()</code>，就会报错：“没有在 undefined 上找到 drink 方法。”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">eat</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Fried chicken!&#x27;</span>);</span><br><span class="line">        <span class="comment">// return undefined;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drink</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Coke!&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sleep</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Gnite~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tuan.eat().drink(); <span class="comment">// 报错，Cannot read property &#x27;drink&#x27; of undefined</span></span><br></pre></td></tr></table></figure><ul><li>在一个对象的函数（方法）里，<code>this</code>指向的是这个对象。</li><li>所以，我们之间在方法（函数）里增加语句<code>return this;</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">eat</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Fried chicken!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drink</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Coke!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sleep</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Gnite~&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tuan.eat().drink().sleep(); <span class="comment">// Fried chicken! Coke! Gnite~</span></span><br></pre></td></tr></table></figure><h2 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h2><p>成员操作符<code>[&#39;属性名&#39;]</code>或者<code>.</code>操作符可以访问到对象的属性，还可以给对象的属性赋值。</p><p>两者作用基本等同，每当你使用<code>.</code>操作符访问属性时，系统内部会自动转换成<code>[]</code>操作符。</p><p>但是以下情况需要使用<code>[]</code>：</p><ul><li>属性名比较特殊，比如包含空格或者连字符。</li><li>需要用变量做属性名。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="string">&#x27;user-name&#x27;</span>: <span class="string">&#x27;cnl@outlook.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nice name&#x27;</span>: <span class="string">&#x27;Tuan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="number">123456</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proto = <span class="string">&#x27;nice name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性名特殊：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user[<span class="string">&#x27;user-name&#x27;</span>]); <span class="comment">// cnl@outlook.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.user-name); <span class="comment">// 报错，name is not defined at Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用变量做属性名：</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.proto); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user[proto]); <span class="comment">// Tuan</span></span><br></pre></td></tr></table></figure><ul><li>属性名拼接。因为<code>[]</code>操作符内填写的是字符串形式的属性名，所以可以通过<code>+</code>进行拼接。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">card1</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Visa&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">card2</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Master&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">card3</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;American Express&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">card4</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Apple Card&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">useCard</span>: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>[<span class="string">&#x27;card&#x27;</span> + num]; <span class="comment">// 字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tuan.useCard(<span class="number">1</span>)); <span class="comment">// &#123; name: &#x27;Visa&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(tuan.useCard(<span class="number">2</span>)); <span class="comment">// &#123; name: &#x27;Master&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(tuan.useCard(<span class="number">4</span>)); <span class="comment">// &#123; name: &#x27;Apple Card&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="对象枚举"><a href="#对象枚举" class="headerlink" title="对象枚举"></a>对象枚举</h2><p>对象枚举（enumeration），又叫遍历，就是将对象的每个属性（属性名+属性值）挨个访问一遍。<br><code>for</code>循环语句可以遍历数组。</p><h3 id="for…in-循环语句"><a href="#for…in-循环语句" class="headerlink" title="for…in 循环语句"></a>for…in 循环语句</h3><p>对象的遍历则需要使用<code>for...in</code>循环语句。它的功能只有一个，就是遍历对象。</p><ul><li>「键名」可以是任意合法的标识符，它在循环的过程中会逐个被赋值为「对象」的属性名。</li><li><code>对象[键名]</code>为对象的属性值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> 键名 <span class="keyword">in</span> 对象) &#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：通过对象属性的个数来控制循环圈数。</p><p>数组算特殊类型的对象，所以也可以使用<code>for...in</code>语句。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[prop]); <span class="comment">// a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出属性名：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span> : <span class="number">45</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> tuan) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(key), key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// string name</span></span><br><span class="line"><span class="comment">// string age</span></span><br><span class="line"><span class="comment">// string sex</span></span><br><span class="line"><span class="comment">// string weight</span></span><br></pre></td></tr></table></figure><p>输出属性值：（注意<code>[]</code>和<code>.</code>操作符的差异）</p><ul><li><code>tuan.key</code>-&gt; 系统内部自动转换成<code>tuan[&#39;key&#39;]</code>，导致的结果：系统是把 key 当做 tuan 的一个属性，因为它没有这个属性，所以会输出 undefined。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> tuan) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tuan.key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// undefined undefined undefined undefined</span></span><br></pre></td></tr></table></figure><ul><li>所以需要使用<code>[]</code>操作符，这样<code>tuan[key]</code>中的<code>key</code>才是变量：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> tuan) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tuan[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// 团 3 female 45</span></span><br></pre></td></tr></table></figure><blockquote><p><code>for...in</code>语句在遍历时，会将对象原型上的属性也访问一遍。不过，它不会遍历到原型链终端<code>Object.prototype</code>系统自带的属性。如果手动给它增加属性，是可以遍历到的。</p></blockquote>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;刘&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.height = <span class="number">160</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> tuan) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prop + <span class="string">&#x27;: &#x27;</span> + tuan[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// name: 团</span></span><br><span class="line"><span class="comment">// age: 3</span></span><br><span class="line"><span class="comment">// sex: female</span></span><br><span class="line"><span class="comment">// weight: 45</span></span><br><span class="line"><span class="comment">// lastName: 刘</span></span><br><span class="line"><span class="comment">// height: 160</span></span><br></pre></td></tr></table></figure><h3 id="hasOwnProperty-方法"><a href="#hasOwnProperty-方法" class="headerlink" title="hasOwnProperty() 方法"></a>hasOwnProperty() 方法</h3><p>任何对象都有<code>hasOwnProperty() </code>方法，它可以<strong>判断属性是否属于这个对象</strong>。括号内传入要判断的属性名（字符串形式）。如果是，它会返回布尔值<code>true</code>。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span> : <span class="number">45</span>,</span><br><span class="line">    <span class="attr">__proto__</span> : &#123;</span><br><span class="line">        <span class="attr">lastName</span> : <span class="string">&#x27;刘&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tuan.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(tuan.hasOwnProperty(<span class="string">&#x27;height&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>增加到<code>for...in</code>语句中，可以过滤掉原型上的属性，只留下自己的。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;刘&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> tuan) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tuan.hasOwnProperty(prop))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(prop + <span class="string">&#x27;: &#x27;</span> + tuan[prop]);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// name: 团</span></span><br><span class="line"><span class="comment">// age: 3</span></span><br><span class="line"><span class="comment">// sex: female</span></span><br><span class="line"><span class="comment">// weight: 45</span></span><br></pre></td></tr></table></figure><blockquote><p>判断是不是自己的属性，不包括原型链上的。</p></blockquote><h3 id="in-操作符"><a href="#in-操作符" class="headerlink" title="in 操作符"></a>in 操作符</h3><p>in 操作符可以判断这个对象能不能访问到这个属性 ，包括原型上的。操作符前面要用属性名（字符串形式）。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span> : <span class="number">45</span>,</span><br><span class="line">    <span class="attr">__proto__</span> : &#123;</span><br><span class="line">        <span class="attr">lastName</span> : <span class="string">&#x27;刘&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> tuan); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;height&#x27;</span> <span class="keyword">in</span> tuan); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>但是 in 操作符有个问题，它不能判断这个属性是属于对象自己的，还是原型上的。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span> : <span class="number">45</span>,</span><br><span class="line">    <span class="attr">__proto__</span> : &#123;</span><br><span class="line">        <span class="attr">lastName</span> : <span class="string">&#x27;刘&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;lastName&#x27;</span> <span class="keyword">in</span> tuan); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>判断某个属性能否访问到，包括原型链上的。</p></blockquote><h3 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h3><p>格式：<code>A instanceof B</code>。判断对象 A 是不是构造函数 B 生产出来的。</p><p>判断方法：看对象 A 的原型链上有没有构造函数 B 的原型。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的原型链终端：Object.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量：</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>判断某个对象是否是这个构造函数生产出来的。</p></blockquote><h2 id="区分数组和对象"><a href="#区分数组和对象" class="headerlink" title="区分数组和对象"></a>区分数组和对象</h2><p>如果有一个数据，需要用方法去判别它是对象还是数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [] | &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="构造器-constructor"><a href="#构造器-constructor" class="headerlink" title="构造器 constructor"></a>构造器 constructor</h3><p>如下：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([].constructor); <span class="comment">// [Function: Array]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.constructor); <span class="comment">// [Function: Object]</span></span><br></pre></td></tr></table></figure><h3 id="instanceof-操作符-1"><a href="#instanceof-操作符-1" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h3><p>如下：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h3><p><code>toString()</code>是定义在<code>Object.prototype</code>上的实例方法，所有实例对象继承了该方法，其可以返回一个对象的字符串形式。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.toString(); <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;.toString(); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><p>对于空对象和一般对象，<code>toString()</code>方法会继承于<code>Object.prototype.toString()</code>，默认返回<code>[object Object]</code>，其中第二个 Object 是该对象的构造函数，那么根据这个值可以判断数据类型。</p><p>然而，字符串、数组、Date 等对象拥有自定义的<code>toString()</code>方法，会覆盖<code>Object.prototype.toString()</code>方法。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.toString(); <span class="comment">// &quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>].toString(); <span class="comment">// &quot;1,2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toString(); <span class="comment">// &quot;Sun Mar 24 2019 16:08:58 GMT+0800&quot;</span></span><br></pre></td></tr></table></figure><p>可以直接使用<code>Object.prototype.toString()</code>方法来获得类型，但由于是在 Object 对象环境中使用方法，所有对象都会显示<code>[object Object]</code>。</p><p>配合<code>call()</code>，改变<code>toString()</code>方法执行时的所在的环境，可以得到对象的精确类型。</p><ul><li><code>Object.prototype</code>里的<code>toString()</code>方法，正常情况下，这个方法被谁调用，那么它里面的 this 就是谁。</li><li><code>toString()</code>方法是为了处理前面的调用者，对象调用了它，那么这个 this 就是对象。它将前面的参数识别出来，然后返回字符串形式。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 猜测这个方法中一定使用了 this</span></span><br><span class="line">    <span class="comment">// 执行过程：</span></span><br><span class="line">    <span class="comment">// 识别 this</span></span><br><span class="line">    <span class="comment">// 返回相应的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>原来是谁调用，this 就是谁。现在直接用<code>call()</code>方法把 this 指向改掉。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([])); <span class="comment">// [object Array]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>函数预编译过程中，除了之前说过的形参、变量和函数声明，还包括<code>arguments</code>和<code>this</code>。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AO = &#123;</span><br><span class="line">    <span class="attr">arguments</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="attr">this</span>: <span class="built_in">window</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>this</code>指向 window（即 GO，全局）。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(); <span class="comment">// Window &#123;......&#125;</span></span><br></pre></td></tr></table></figure><p>全局作用域里的<code>this</code>也指向 window。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Window &#123;......&#125;</span></span><br></pre></td></tr></table></figure><p><code>call()</code>和<code>apply()</code>方法可以改变函数运行时<code>this</code>的指向。</p><p>在对象里，谁调用了方法，这个方法里面的 this 就是谁。</p><ul><li>对象的方法执行时同样会走预编译，预编译完成后，this 会根据调用者来改变指向。</li><li>对象 tuan 调用了 test 方法，那么它里面的 this 就指向 tuan 这个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// 团</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;团&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tuan.test();</span><br></pre></td></tr></table></figure><ul><li>如果没人调用它，直接空执行，那么<code>this</code>就是指向 window 的。</li></ul><p>注意，如果在对象方法里再执行一个函数，这个函数里面的 this 没人调用的话，那么它同样是指向 window 的。</p><ul><li>对象 b 调用 say 方法，里面的 this 指向 b</li><li>把 a.say 的<strong>函数引用</strong>当作实际参数传入 b 的 say 方法中</li><li>相当于<code>fun = function () &#123;console.log(this.name)&#125;;</code></li><li>函数 fun 在 b 的 say 方法里执行，没有人调用它</li><li>所以按照预编译，函数 fun 里的 this 指向 window </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">say</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="attr">say</span> : <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.say(a.say); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p><code>arguments</code>是一个对应于传递给函数的参数的类数组对象。</p><p>属性有：<code>arguments.callee</code>、<code>arguments.length</code>。</p><p><code>arguments.callee</code>指向当前执行的函数。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); <span class="comment">// [Function: test]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == test); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>用处：比如需要初始化工具时，立即执行函数没有函数名，而在函数内又需要用到它自身，就可以用来<code>arguments.callee</code>来代替。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>);</span><br><span class="line">&#125;(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p><code>arguments.length</code>指向传递给当前函数的参数数量。</p><p><code>function.caller</code>返回调用函数。</p><ul><li>如果一个函数<code>f</code>是在全局作用域内被调用的，则<code>f.caller</code>为<code>null</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">piao</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(piao.caller); <span class="comment">// null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">piao();</span><br></pre></td></tr></table></figure><ul><li>如果一个函数是在另外一个函数作用域内被调用的，则<code>f.caller</code>指向调用它的那个函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo 在 test 函数作用域内被调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    demo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(demo.caller); <span class="comment">// [Function: test]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><h3 id="浅层克隆"><a href="#浅层克隆" class="headerlink" title="浅层克隆"></a>浅层克隆</h3><p>浅克隆的对象的引用值是==拷贝==对象里的引用，这两个对象里面的引用（如对象里的数组或者内嵌对象）指向的地方是一致的。</p><p>原始值是值拷贝，各自改各自的，没有影响。</p><p>例如：</p><ul><li>1# 处声明一个 target 变量，是为了保证用户在没有传入第二个变量时，程序依然可以正常运行。</li><li>因为对象<code>cat2</code>的引用值是直接拷贝<code>cat</code>的引用，它俩指向同一个地址，所以一个改动，另一个也会改动。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;票&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">card</span>: [<span class="string">&#x27;Visa&#x27;</span>, <span class="string">&#x27;Master&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;;<span class="comment">// 1#</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">        target[prop] = origin[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clone(cat, cat2)); <span class="comment">// &#123; name: &#x27;票&#x27;, age: 1, card: [ &#x27;Visa&#x27;, &#x27;Master&#x27; ] &#125;</span></span><br><span class="line"></span><br><span class="line">cat2.card.push(<span class="string">&#x27;Apple Card&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cat2.card); <span class="comment">// [ &#x27;Visa&#x27;, &#x27;Master&#x27;, &#x27;Apple Card&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.card);  <span class="comment">// [ &#x27;Visa&#x27;, &#x27;Master&#x27;, &#x27;Apple Card&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="深层克隆"><a href="#深层克隆" class="headerlink" title="深层克隆"></a>深层克隆</h3><p>两个对象里的引用独立拷贝，不指向同一个地方。</p><p>步骤如下：</p><p>遍历每个属性。</p><ul><li><code>for(var prop in obj)&#123;&#125;</code></li><li>遍历时需注意，<code>for...in</code>会将对象的原型链上的属性也拿出来，所以需要<code>hasOwnProperty() </code>方法验证该属性是否属于这个对象。</li></ul><p>判断属性是不是原始值，原始值直接进行值拷贝。</p><ul><li><code>typeof()</code></li><li><code>null</code>的数据类型也被识别为 <code>object</code>，所以需要把它去掉。</li></ul><p>如果是引用值，判断引用值是数组还是对象。</p><ul><li><p><code>toString()</code>、<code>instanceof</code>、<code>constructor</code></p></li><li><p>考虑到父子域跨域访问的问题，建议使用<code>toString()</code></p></li></ul><p>建立相应的空引用值（数组或对象）。</p><ul><li><code>&#123;&#125;</code>、<code>[]</code></li></ul><p>把要拷贝的引用值当作一个新的对象或数组，然后从第一步开始循环。</p><ul><li>递归</li></ul><p>规律：判断引用值里的属性是原始值还是引用值……</p><ul><li>出口：当这个属性是原始值时<code>else &#123;target[prop] = origin[prop]&#125;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">card</span>: [<span class="string">&#x27;Visa&#x27;</span>, <span class="string">&#x27;Master&#x27;</span>, <span class="string">&#x27;Apple Card&#x27;</span>],</span><br><span class="line">    <span class="attr">prefer</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;dou&#x27;</span>,</span><br><span class="line">        <span class="attr">cat</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;piao&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tuan2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;,</span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        arrStr = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">        <span class="keyword">if</span> (origin.hasOwnProperty(prop)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (origin[prop] !== <span class="string">&#x27;null&#x27;</span> &amp;&amp; <span class="keyword">typeof</span>(origin[prop]) == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (toStr.call(origin[prop]) == arrStr) &#123;</span><br><span class="line">                    target[prop] = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    target[prop] = &#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                deepClone(origin[prop], target[prop]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                target[prop] = origin[prop];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deepClone(tuan, tuan2);</span><br><span class="line"></span><br><span class="line">tuan.card.push(<span class="string">&#x27;American Express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tuan.card); <span class="comment">// [ &#x27;Visa&#x27;, &#x27;Master&#x27;, &#x27;Apple Card&#x27;, &#x27;American Express&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(tuan2.card); <span class="comment">// [ &#x27;Visa&#x27;, &#x27;Master&#x27;, &#x27;Apple Card&#x27; ]</span></span><br><span class="line"></span><br><span class="line">tuan.prefer.cat.toy = <span class="string">&#x27;ball&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tuan.prefer); <span class="comment">// &#123; name: &#x27;dou&#x27;, cat: &#123; name: &#x27;piao&#x27;, toy: &#x27;ball&#x27; &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(tuan2.prefer); <span class="comment">// &#123; name: &#x27;dou&#x27;, cat: &#123; name: &#x27;piao&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>又叫条件运算符、三元运算符。它是 JavaScript 中唯一需要三个操作数的运算符。运算的结果根据给定条件在两个值中取其一。语法为：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 值<span class="number">1</span> : 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果<code>条件</code>为真，则结果取<code>值1</code>。否则为<code>值2</code>。你能够在任何允许使用标准运算符的地方使用条件运算符。</p><p>功能类似<code>if...else</code>语句。它还自带<code>return</code>返回值。</p><p>例：</p><ul><li>有括号先看括号</li><li>字符串之间的比较是比较 asc 码，字符串’10’（一零）和字符串’9’逐位比较，<code>&#39;10&#39; &lt; &#39;9&#39;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span> &gt; <span class="number">3</span> ? (<span class="string">&#x27;10&#x27;</span> &gt; <span class="string">&#x27;9&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>) : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>可以使用三目运算符简化深层克隆里的部分步骤。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, target</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;,</span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        arrStr = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.hasOwnProperty(prop)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(origin[prop] !==<span class="string">&#x27;null&#x27;</span> &amp;&amp; <span class="keyword">typeof</span>(origin[prop]) == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                target[prop] = (toStr.call(origin[prop]) == arrStr) ? [] : &#123;&#125;;</span><br><span class="line">                deepClone(origin[prop], target[prop]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                target[prop] = origin[prop];  </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h2><blockquote><p>字符串原始值无法拥有属性和方法，但是字符串对象可以有。</p></blockquote><p><code>length</code>属性：返回字符串的长度。</p><p><code>indexOf(&#39;文本&#39;, 检索起始位置)</code>方法：返回字符串中指定文本首次出现的位置（索引）。未找到会返回 -1。</p><p><code>lastIndexOf()</code>：返回指定文本最后一次出现的位置。未找到会返回 -1。注意：该方法向后进行检索（从尾到头），这意味着：假如第二个参数是 50，则从位置 50 开始检索，直到字符串的起点。</p><p><code>search()</code>：搜索特定值的字符串，并返回匹配的位置。</p><p>区别：</p><ul><li>search() 方法无法设置第二个开始位置参数。</li><li>indexOf() 方法无法设置更强大的搜索值（正则表达式）。</li></ul><p>例如：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hhh略略略啦啦啦xfsdsdfcdeewruiggvsfasdfghj&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 36</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;f&#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;f&#x27;</span>, <span class="number">11</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;z&#x27;</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;f&#x27;</span>)); <span class="comment">// 32</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;f&#x27;</span>, <span class="number">11</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&#x27;z&#x27;</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">&#x27;f&#x27;</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><code>slice(从该位开始截取，截取到该位之前)</code>：截取字符串的某部分并返回该部分。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>任何使用 <code>var</code> 声明的属性不能从全局作用域或函数的作用域中删除。</p><p>通过 var 操作给 window 上增加的属性，这种属性叫做不可配置的属性。不可配置的属性无法进行 delete 操作。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> num); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">num1 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> num1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 报错， num1 is not defined</span></span><br></pre></td></tr></table></figure><p>引用值没必要研究隐式类型转换，如果一定要转换也是可以的。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空数组不等于空数组，引用值地址不一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([] == []); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log([] === []); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">命名冲突｜区分数组与对象｜克隆｜字符串对象</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(七)数组</title>
    <link href="https://cnlmx.top/post/22db/"/>
    <id>https://cnlmx.top/post/22db/</id>
    <published>2019-10-11T02:11:10.000Z</published>
    <updated>2021-07-19T07:03:44.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>数组字面量：<code>var arr = [];</code>，内部还是<code>new Array()</code>的方式。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>构造函数：<code>var arr = new Array();</code></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>共同点：构造函数没有参数时表示定义一个空数组，等同于<code>[]</code>。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>区别：</p><ul><li>使用构造函数定义数组，当它只有一个数字类型的参数时，意为数组长度，而不是在确定数组成员。</li><li>使用字面量定义数组，数组是什么就是什么，非常明确。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示数组长度为 2 的稀松数组：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [empty × 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示数组：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">3.5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [3.5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3.5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// 报错，无效的数组长度 Uncaught RangeError: Invalid array length</span></span><br></pre></td></tr></table></figure><p>一般情况下，推荐使用<strong>字面量创建数组</strong>。</p><p>数组是一种特殊的对象，所以当一个数组没有数据，但又访问它的话，会返回<code>undefined</code>。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;tuan&#x27;</span>, <span class="string">&#x27;dou&#x27;</span>, <span class="string">&#x27;piao&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// tuan</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>操作数组的方法发展：以 ES3.0 为基础，ES5.0 在 ES3 基础上扩展，ES6.0 在 ES5 基础上扩展。</p><blockquote><p>以下这些操作数组的方法是 ES3.0 中的。</p></blockquote><h2 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h2><h3 id="push-：末尾加数据"><a href="#push-：末尾加数据" class="headerlink" title="push()：末尾加数据"></a>push()：末尾加数据</h3><p><code>push()</code>：往数组的末尾追加数据，返回数组长度。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">10</span>, <span class="number">3</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 10, 3]</span></span><br></pre></td></tr></table></figure><h3 id="pop-：末尾删数据"><a href="#pop-：末尾删数据" class="headerlink" title="pop()：末尾删数据"></a>pop()：末尾删数据</h3><p><code>pop()</code>：把数组的最后一位剪切出来，返回被剪切的数据。执行时不用传参。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="unshift-：开头加数据"><a href="#unshift-：开头加数据" class="headerlink" title="unshift()：开头加数据"></a>unshift()：开头加数据</h3><p><code>unshift()</code>：往数组的开头追加数据，返回数组长度。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">10</span>, <span class="number">3</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 3, 1]</span></span><br></pre></td></tr></table></figure><h3 id="shift-：开头删数据"><a href="#shift-：开头删数据" class="headerlink" title="shift()：开头删数据"></a>shift()：开头删数据</h3><p><code>shift()</code>：把数组的第一位剪切出来，返回被剪切的数据。执行时不用传参。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.shift()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="reverse-：逆转顺序"><a href="#reverse-：逆转顺序" class="headerlink" title="reverse()：逆转顺序"></a>reverse()：逆转顺序</h3><p><code>reverse()</code>：逆转数组顺序。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse()); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><h3 id="splice-：截取并添加"><a href="#splice-：截取并添加" class="headerlink" title="splice()：截取并添加"></a>splice()：截取并添加</h3><p><code>splice()</code>：从第几位开始，截取多少位，在切口处添加数据。</p><p>格式：<code>xx.splice(从第几位开始，截取多少的长度，在切口处添加新的数据)</code></p><p>返回被截取的数据。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>)); <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 1, 2, 0, 9, 8, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><p>如果不截取，仅添加：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从第 3 位开始，截取 0，在第 3 位之前插入新的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>)); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [ 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果从负数位开始，就是逆序处理：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(-<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// [6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：如果是从 -1 开始，截取 3 位，最后结果也只有 1 位</span></span><br><span class="line"><span class="comment">// 如果想截取 3 位，负数需要是 -3 甚至 更小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.splice(-<span class="number">4</span>, <span class="number">3</span>)); <span class="comment">// [3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 6]</span></span><br></pre></td></tr></table></figure><p>负数的内部原理：数据实际索引 = 负数 + 数组的 lenght</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">splice = <span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</span><br><span class="line">    pos += pos &gt; <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">this</span>.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比如 pos 为 -1，小于 0</span></span><br><span class="line"><span class="comment">// 那么 pos += 4</span></span><br><span class="line"><span class="comment">// pos = -1 + 4 -&gt; pos = 3</span></span><br><span class="line"><span class="comment">// -1 位就是第 3 位</span></span><br></pre></td></tr></table></figure><h3 id="sort-：排序"><a href="#sort-：排序" class="headerlink" title="sort()：排序"></a>sort()：排序</h3><p><code>sort()</code>：给数组排序，默认按字符的 asc 码排列。返回排序完成后的数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()); <span class="comment">// [ -1, 10, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ -1, 10, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><p>如果想要改变<code>sort()</code>方法的排序规则，在括号内创建函数，系统会自动调用，实现你想要的规则。</p><p>要求：这个函数必须写两个形式参数。</p><p>原理：系统会自动调用无数次这个函数（调用次数可求），第一次调用时，会把数组的第一位和第二位传入函数。第二次传入第一位和第三位，第三次传入第一位和第四位，当第一位和所有都比完后，再比较第二位和第三位，第二位和第四位……（冒泡排序）。通过函数内的规则比较，比较完成后，当返回值：</p><ul><li>为负数时，前面的数在前。</li><li>为正数时，后面的数在前。</li><li>为 0 时，保持不变</li></ul><p>现在我们想要按照自然数升序排序，那么定义规则如下：</p><ul><li>第一次：3 和 4 比较，<code>3 &lt; 4</code> -&gt; 输出 -1，为负数，3 在前</li><li>第二次：3, 10 -&gt; <code>3 &lt; 10</code> -&gt;  -1 -&gt; 3 在前</li><li>第三次：3, -1 -&gt;<code>3 &gt; -1</code> -&gt;  1 -&gt; 3 在后</li><li>第六次：4, 10 -&gt;<code>4 &lt; 10</code>-&gt;  -1 -&gt; 4 在前</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ -1, 3, 4, 5, 6, 10 ]</span></span><br></pre></td></tr></table></figure><p>简化自然数升序排序规则：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> a - b;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ -1, 3, 4, 5, 6, 10 ]</span></span><br></pre></td></tr></table></figure><p>自然数降序规则：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 10, 6, 5, 4, 3, -1 ]</span></span><br></pre></td></tr></table></figure><p>给一个有序的数组乱序，确保每次执行是不一样的顺序。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 4, 1, 5, 2, 3, 7, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 2, 1, 4, 7, 3, 5, 6 ]</span></span><br></pre></td></tr></table></figure><p>将下面的数组内成员按字符串长度排序：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;bcdefg&#x27;</span>, <span class="string">&#x27;cccc&#x27;</span>, <span class="string">&#x27;dfsgsgsgesgv&#x27;</span>,<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;xxyyzz&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> a.length - b.length;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ &#x27;z&#x27;, &#x27;ab&#x27;, &#x27;cccc&#x27;, &#x27;bcdefg&#x27;, &#x27;xxyyzz&#x27;, &#x27;dfsgsgsgesgv&#x27; ]</span></span><br></pre></td></tr></table></figure><blockquote><p>规律总结：不管是什么比较，都是按照冒泡排序将数组成员传入函数进行比较，所以大胆写就好了。</p></blockquote><h2 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h2><h3 id="concat-：数组拼接"><a href="#concat-：数组拼接" class="headerlink" title="concat()：数组拼接"></a>concat()：数组拼接</h3><p><code>concat()</code>：连接两个数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.concat(arr1)); <span class="comment">// [ 1, 2, 3, 5, 7 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [ 5, 7 ]</span></span><br></pre></td></tr></table></figure><p>注意，连接后有了一个新的数组，原数组是没有改变的。</p><h3 id="join-：数组元素连接"><a href="#join-：数组元素连接" class="headerlink" title="join()：数组元素连接"></a>join()：数组元素连接</h3><p><code>join()</code>：把数组各元素用参数连接起来，并返回字符串形式。不传参数的话，默认按照逗号连接。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.join(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newArr); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// 1-2-3-4-5-6</span></span><br></pre></td></tr></table></figure><p>字符串方法<code>split()</code>与数组方法<code>join()</code>是互逆的，<code>join()</code>按什么连，<code>split()</code>就可以按什么拆。</p><p><code>split()</code>：将字符串按照参数拆分成数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.join(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// 1-2-3-4-5-6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr.split(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// [ &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27; ]</span></span><br></pre></td></tr></table></figure><p>把下列所有字符串连接起来：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Alibaba&#x27;</span>,</span><br><span class="line">    str1 = <span class="string">&#x27;Baidu&#x27;</span>,</span><br><span class="line">    str2 = <span class="string">&#x27;Tencent&#x27;</span>,</span><br><span class="line">    str3 = <span class="string">&#x27;Bytedance&#x27;</span>,</span><br><span class="line">    str4 = <span class="string">&#x27;Wangyi&#x27;</span>,</span><br><span class="line">    str5 = <span class="string">&#x27;Weibo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [str, str1, str2, str3, str4, str5];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// AlibabaBaiduTencentBytedanceWangyiWeibo</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串是原始值，存储在栈内存里面，栈内存是先进后出的规则。如果使用<code>+</code>号来连接，需要来回在栈内取元素，这样很浪费时间，效率很低。<br>数组作为引用值，是一种散列结构存储在堆内存里面，散列算法会更有效率。</p></blockquote><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p><code>toString()</code>：将数组变成字符串。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(arr.toString())); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.toString()); <span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="slice-：截取"><a href="#slice-：截取" class="headerlink" title="slice()：截取"></a>slice()：截取</h3><p><code>slice()</code>：对数组进行截取，不改变原数组，所以要注意<strong>接收返回值</strong>。</p><p>格式：<code>slice(从该位开始截取，截取到该位之前)</code>。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><p>如果省略第二个参数，那么就代表：从该位开始截取，截取到数组结束之前。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>如果是从负数位开始截取，就是逆序截取。</p><p>如果两个参数都省略，那么就代表数组全部截取。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p>属性要为索引（数字）属性。</p><p>必须有 length 属性。</p><p>最好加上<code>push()</code>方法。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">push</span>: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.push(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// &#123; &#x27;0&#x27;: &#x27;a&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;1&#x27;: &#x27;b&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;2&#x27;: &#x27;c&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;3&#x27;: &#x27;d&#x27;,</span></span><br><span class="line"><span class="comment">//   length: 4,</span></span><br><span class="line"><span class="comment">//   push: [Function: push] &#125;</span></span><br></pre></td></tr></table></figure><p>如果再加上<code>splice()</code>方法，会完全展现出数组的样式。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>: <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">    <span class="string">&#x27;splice&#x27;</span>: <span class="built_in">Array</span>.prototype.splice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Object(3) [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, push: ƒ, splice: ƒ]</span></span><br></pre></td></tr></table></figure><p>它依然是对象，但可以当数组用。</p><p>类数组的优点：把数组和对象的好处拼到一起。不过并不是所有的数组方法都能用，除非你自己添加。</p><p><code>arguments</code>就是一个类数组。</p><h3 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h3><p><code>push()</code>方法能作用于类数组，关键点在于：length 属性。</p><p>对象中 length 的属性值决定了<code>push()</code>从哪里加入新数据。</p><p><code>Array.prototype.push()</code>可以理解的简单版本：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[<span class="built_in">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="built_in">this</span>.length ++; <span class="comment">// 它不能像数组一样自动增加，所以有这句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Array.prototype.push()</code>源码：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayPush</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = TO_UNIT32(<span class="built_in">this</span>.length);</span><br><span class="line">  <span class="keyword">var</span> m = %_ArgumentsLength();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m; i++) &#123; <span class="comment">// 逐个复制元素</span></span><br><span class="line">    <span class="built_in">this</span>[i + n ] = %_Arguments(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.length = n + m; <span class="comment">// 修改数组的length</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求下列输出结果：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部解析：obj[obj.length] = &#x27;c&#x27; -&gt;  obj[2] = &#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>: <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">&#125;</span><br><span class="line">obj.push(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">obj.push(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// &#123; &#x27;2&#x27;: &#x27;c&#x27;, &#x27;3&#x27;: &#x27;d&#x27;, length: 4, push: [Function: push] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="类数组转换为数组"><a href="#类数组转换为数组" class="headerlink" title="类数组转换为数组"></a>类数组转换为数组</h3><p>最原生的方法：使用一个新的数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = [],</span><br><span class="line">    len = divArr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    result.push(divArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Array.prototype.slice.call(arrayLike)</code>：该方法借用了数组原型中的 slice 方法，会返回一个数组。</p><ul><li>slice 方法的内部实现：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slice(从该位开始截取，截取到该位之前)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();  </span><br><span class="line">    start = start || <span class="number">0</span>;  </span><br><span class="line">    end = end || <span class="built_in">this</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; end; i++) &#123;  </span><br><span class="line">        result.push(<span class="built_in">this</span>[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>运用：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;tuan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;dou&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;piao&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(arrLike)); <span class="comment">// [&quot;tuan&quot;, &quot;dou&quot;, &quot;piao&quot;]</span></span><br><span class="line"><span class="comment">// 改变 this 指向到这个类数组</span></span><br><span class="line"><span class="comment">// slice 两个参数都省略，代表全部截取</span></span><br><span class="line"><span class="comment">// 截取某部分 -&gt; xx.call(arrLike, start, end);</span></span><br></pre></td></tr></table></figure><p><code>Array.from()</code>：ES6 中新增方法，可以将两类对象转为真正的数组：类数组对象、可遍历（iterable）对象（包括 ES6 新增的数据结构 Set 和 Map）。只要有 length 属性的对象，都可以应用此方法转换成数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="补充：数组迭代方法"><a href="#补充：数组迭代方法" class="headerlink" title="补充：数组迭代方法"></a>补充：数组迭代方法</h2><blockquote><p>数组迭代方法对每个数组项进行操作，不会改变原数组。</p></blockquote><h3 id="forEach-调用函数"><a href="#forEach-调用函数" class="headerlink" title="forEach()-调用函数"></a>forEach()-调用函数</h3><p><code>forEach(callback)</code>方法为每个数组元素调用一次函数（回调函数），没有返回值。</p><p>callback 回调函数中有两个变量：elem 和 index，elem 用于接收数组元素，index 就是对应的元素索引。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> familyArr = [<span class="string">&#x27;tuan&#x27;</span>, <span class="string">&#x27;dou&#x27;</span>, <span class="string">&#x27;piao&#x27;</span>];</span><br><span class="line"></span><br><span class="line">familyArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">&#x27;: &#x27;</span> + elem); <span class="comment">// 0: tuan 1: dou 2: piao</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>内部实现原理：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        fn(<span class="built_in">this</span>[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能使用 break 语句，从源码来看，这个 break 的位置是在函数 fn 里面，而不是在 for 循环里，所以无法通过它来中断循环语句。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> familyArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;tuan&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">card</span>: <span class="string">&#x27;Visa&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;dou&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">card</span>: <span class="string">&#x27;Master&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;piao&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">card</span>: <span class="string">&#x27;Apple Card&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line">familyArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(elem.name == <span class="string">&#x27;dou&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 报错，非法中断声明 Uncaught SyntaxError: Illegal break statement</span></span><br></pre></td></tr></table></figure><p>return 语句也只是终止循环中那一次 fn 函数，无法终止整个 for 循环。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环到 name = &#x27;dou&#x27; 的成员时，它的 fn 函数被终止</span></span><br><span class="line">familyArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elem.name == <span class="string">&#x27;dou&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 0 2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="filter-筛选"><a href="#filter-筛选" class="headerlink" title="filter()-筛选"></a>filter()-筛选</h3><p><code>filter(callback)</code>方法可以通过函数筛选出一个新的数组。返回值是符合筛选条件的新数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>回调函数中会有一个 return 语句，后面跟有筛选条件。当有数组成员满足该条件时，就存放到新数组中。遍历完成后，将该数组返回。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> familyArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;tuan&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;dou&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;piao&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 返回索引为奇数的数组成员：</span></span><br><span class="line"><span class="keyword">var</span> newArr = familyArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [&#123;name: &quot;dou&quot;, age: 2&#125;]</span></span><br></pre></td></tr></table></figure><p>内部实现原理：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fn(<span class="built_in">this</span>[i], i)) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 map() 的区别：filter() 方法 return 后跟的是筛选条件，符合条件的存放到新数组中，最后返回新数组。map() 方法 return 后跟的就是我需要的值，这些值直接存放到新数组中，最后返回新数组。</p><h3 id="map-操作"><a href="#map-操作" class="headerlink" title="map()-操作"></a>map()-操作</h3><p><code>map(callback)</code>方法对每个数组元素执行函数，然后使用 return 出来的值创建新数组。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>回调函数中有 return 语句，后面跟的值就是新数组的成员。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = familyArr.map(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> elem.card;</span><br><span class="line">    <span class="keyword">delete</span> elem.age;</span><br><span class="line">    <span class="keyword">if</span>(index % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        elem.character = <span class="string">&#x27;狗鸡&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> elem;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        elem.character = <span class="string">&#x27;小可爱&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> elem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// newArr = [</span></span><br><span class="line"><span class="comment">// &#123;name: &quot;tuan&quot;, character: &quot;狗鸡&quot;&#125;,</span></span><br><span class="line"><span class="comment">// &#123;name: &quot;dou&quot;, character: &quot;小可爱&quot;&#125;,</span></span><br><span class="line"><span class="comment">// &#123;name: &quot;piao&quot;, character: &quot;狗鸡&quot;&#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>内部实现原理：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        arr.push(fn(<span class="built_in">this</span>[i], i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从内部原理可以看出，map() 方法的实现是基于浅克隆，即直接拷贝引用地址。所以需注意，<strong>当数组成员是值类型，map不会改变原数组；当数组成员是引用类型，则可以改变原数组</strong>。</p><p>map() 方法不会对没有值的数组元素执行函数。</p><h3 id="reduce-累加"><a href="#reduce-累加" class="headerlink" title="reduce()-累加"></a>reduce()-累加</h3><p><code>reduce(callback)</code>方法从左向右在每个数组元素上运行函数，以生成或减少它单个值。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">perValue, elem, index</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;,initialValue);</span><br></pre></td></tr></table></figure><p>callback 回调函数中有三个变量：perValue，elem 和 index。perValue 为上一次返回的值，如果没有上一次 return 值，会取第 0 位数组成员作为初始值，然后从数组第 1 位开始运行。elem 和 index 依然代表数组成员和索引。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue); <span class="comment">// 5 1 2 3</span></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// preValue    index</span></span><br><span class="line"><span class="comment">//5  1</span></span><br><span class="line"><span class="comment">// 1  2</span></span><br><span class="line"><span class="comment">//2  3</span></span><br><span class="line"><span class="comment">//3  4</span></span><br></pre></td></tr></table></figure><p>也可以传一个初始值 initialValue。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue); <span class="comment">// 10 0 1 2 3</span></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// preValue    index</span></span><br><span class="line"><span class="comment">//  10   0</span></span><br><span class="line"><span class="comment">// 0  1</span></span><br><span class="line"><span class="comment">//1  2</span></span><br><span class="line"><span class="comment">//2  3</span></span><br><span class="line"><span class="comment">//   3   4</span></span><br></pre></td></tr></table></figure><p>常用于累加器。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preValue + elem;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// preValue  elem     return</span></span><br><span class="line"><span class="comment">// 5  3  8</span></span><br><span class="line"><span class="comment">//  8  7 15</span></span><br><span class="line"><span class="comment">//15  1 16</span></span><br><span class="line"><span class="comment">//16  9 25</span></span><br></pre></td></tr></table></figure><p>内部实现原理：</p><ul><li>先判断 init 是否有值，没有则取第 0 位作初始值，函数从第 1 位开始执行</li><li>init 有值，函数从第 0 位开始执行</li><li>fn 每次执行完成后 return 出来的值，会作为下一次 previous 的值，所以直接用 previous 接收即可</li><li>最后返回全部数组成员执行完成后的 previous 值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">fn, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = init,</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(init === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        previous = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        previous = fn(previous, <span class="built_in">this</span>[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>和 map() 的区别：map() 会存储每一次执行的值，最后组成一个新数组返回。reduce() 是在所有数组成员执行完成后，返回最后的那个 return 值。</p><h3 id="reduceRight-累加"><a href="#reduceRight-累加" class="headerlink" title="reduceRight()-累加"></a>reduceRight()-累加</h3><p><code>reduceRight(callback)</code>方法是从右向左，其他地方和 reduce() 没区别。</p><p>initialValue 没有传值时：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue); <span class="comment">// 9 3 2 1</span></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// preValue    index    elem</span></span><br><span class="line"><span class="comment">//9  3 1</span></span><br><span class="line"><span class="comment">// 3  2 7</span></span><br><span class="line"><span class="comment">//2  1 3</span></span><br><span class="line"><span class="comment">//1  0 5</span></span><br></pre></td></tr></table></figure><p>initialValue 有值时：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">preValue, elem, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue); <span class="comment">// 10 4 3 2 1</span></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>内部实现原理：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduceRight = <span class="function"><span class="keyword">function</span> (<span class="params">fn, init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = init,</span><br><span class="line">        i = <span class="built_in">this</span>.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(init === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        previous = <span class="built_in">this</span>[i];</span><br><span class="line">        i = <span class="built_in">this</span>.length - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        previous = fn(previous, <span class="built_in">this</span>[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> previous;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/js/js_array_iteration.asp">剩余更多方法</a></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="封装-typeof-方法"><a href="#封装-typeof-方法" class="headerlink" title="封装 typeof() 方法"></a>封装 typeof() 方法</h3><p>要求：调用后可以输出准确的值类型，比如原始值数字输出<code>number</code>，数字对象输出<code>number-object</code>，数组输出<code>array</code>等。</p><p>思路：</p><ul><li>分两类：原始值、引用值</li><li>区分引用值：数组、对象、包装类</li><li>包装类判断：<code>Object.prototype.toString()</code></li></ul><p>函数如下：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTypeof</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> typeStr = <span class="keyword">typeof</span>(target),</span><br><span class="line">        template = &#123;</span><br><span class="line">            <span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;number - object&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;string - object&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;boolean - object&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (target === <span class="literal">null</span>) &#123; <span class="comment">// 单独输出 null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeStr == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line">        <span class="keyword">return</span> template[str];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> typeStr; <span class="comment">// 原始值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTypeof();</span><br></pre></td></tr></table></figure><p>这一类工具方法可以放入一个专门的 .js 文件里，以便后续直接使用。</p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>要求：在原型链上进行编程，不改变原数组。</p><p>思路：</p><ul><li>一个对象不可能有两个或两个以上同名的属性，可以同值，不能同名。</li><li>当某个属性已经存在，后续调用都默认是在访问这个属性。如果某个属性不存在，访问会显示<code>undefined</code>。</li><li>将数组内的成员（属性值）当作对象的属性名传入，属性值任意（不是转化为 false 的那六个值即可）。</li><li>依次传入，如果某个属性名已经存在（返回属性值），传入下一个判断。</li><li>如果不存在（返回<code>undefined</code>），新增这个属性，再接着判断下一个。</li><li>最终会剩下不同的属性名，取出剩下的属性名，完成。</li></ul><p>函数如下：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> temp = &#123;&#125;,</span><br><span class="line">        arr = [],</span><br><span class="line">        len = <span class="built_in">this</span>.length;   </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!temp[<span class="built_in">this</span>[i]]) &#123;</span><br><span class="line">         temp[<span class="built_in">this</span>[i]] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>建立空对象用来装属性名</li><li>建立一个空数组用来装去重后的数组成员，最后 return 出去</li><li>遍历数组成员：<code> for(var i = 0; i &lt; len; i++) &#123;&#125;</code></li><li>将数组成员<code>this[i]</code>传入对象<code>temp</code>中：<code>temp[this[i]]</code></li><li>如果访问的属性名存在，可以访问到属性值，那就忽略，继续下一个</li><li>如果不存在：<code>temp[this[i]] = undefined</code></li><li>让<code>undefiend</code> 取反，走 if 语句新增进去：<code>!temp[this[i]]</code></li></ul><p>进行调用：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oneArr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="string">&#x27;dou&#x27;</span>, <span class="string">&#x27;dou&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oneArr.unique()); <span class="comment">// [ 1, 3, 4, 5, &#x27;dou&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oneArr); <span class="comment">// [ 1, 1, 3, 4, 5, 5, 5, 3, &#x27;dou&#x27;, &#x27;dou&#x27; ]</span></span><br></pre></td></tr></table></figure><p>注意：这个对象里的属性值任意，但不能是转化为 false 的那六个值。因为如果属性值转化为 false 了，然后再取反，会变成 true，走 if 语句，这样就不能去重了。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> temp = &#123;&#125;,</span><br><span class="line">        arr = [],</span><br><span class="line">        len = <span class="built_in">this</span>.length;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!temp[<span class="built_in">this</span>[i]]) &#123;</span><br><span class="line">            temp[<span class="built_in">this</span>[i]] = <span class="built_in">this</span>[i];</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oneArr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="string">&#x27;dou&#x27;</span>, <span class="string">&#x27;dou&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oneArr.unique()); <span class="comment">// [ 1, 0, 0, 0, 5, 3, &#x27;dou&#x27; ]</span></span><br></pre></td></tr></table></figure><p>当<code>temp[this[i]] = this[i]</code>，而此时数组内有成员为 0，考察 0 的问题：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 temp[this[i]] = this[i]，而数组内又有 0</span></span><br><span class="line"><span class="comment">// 也就是在遍历过程中，this[i] 会等于 0</span></span><br><span class="line"><span class="comment">// 然后它作为属性值赋给了对象：temp[0] = 0</span></span><br><span class="line"><span class="comment">// 再考察下一个 0 时，if 条件中的 temp[0] = 0，再取反就为 true</span></span><br><span class="line"><span class="comment">// 会再走一次 if 语句，无法将它排除出去</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>[<span class="number">2</span>] = <span class="number">0</span> -&gt; temp[<span class="built_in">this</span>[<span class="number">2</span>]] -&gt; temp[<span class="number">0</span>] = <span class="literal">undefined</span> -&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="literal">undefined</span>) &#123;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="built_in">this</span>[<span class="number">2</span>] -&gt; temp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    arr.push(<span class="number">0</span>) -&gt; arr = [<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>[<span class="number">3</span>] = <span class="number">0</span> -&gt; temp[<span class="built_in">this</span>[<span class="number">3</span>]] </span><br><span class="line">已有：temp[<span class="number">0</span>] = <span class="number">0</span> -&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(!<span class="number">0</span>) &#123;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="built_in">this</span>[<span class="number">3</span>] -&gt; temp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    arr.push(<span class="number">0</span>) -&gt; arr = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-数组搜索"><a href="#demo-数组搜索" class="headerlink" title="demo: 数组搜索"></a>demo: 数组搜索</h2><p>HTML:</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组搜索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;arraySearch.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;search-box&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">species</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>All<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">species</span>=<span class="string">&quot;human&quot;</span>&gt;</span>Human<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">species</span>=<span class="string">&quot;cat&quot;</span>&gt;</span>Cat<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../tools.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;arraySearch.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS:</p>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.search</span> <span class="selector-class">.search-box</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.search</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.search</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#38f</span>;  <span class="comment">/* 百度蓝 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.search</span> <span class="selector-tag">p</span> <span class="selector-tag">span</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#38f</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;             </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.user-list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.user-list</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.user-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.user-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.user-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.user-list</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span><span class="selector-class">.des</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.7em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原数组：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personArr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘团子&#x27;</span>, <span class="attr">src</span>: <span class="string">&#x27;images/weibotuan.jpg&#x27;</span>, <span class="attr">des</span>: <span class="string">&#x27;我要减肥......&#x27;</span>, <span class="attr">species</span>: <span class="string">&#x27;human&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;陈豆子&#x27;</span>, <span class="attr">src</span>: <span class="string">&#x27;images/weibodou.jpg&#x27;</span>, <span class="attr">des</span>: <span class="string">&#x27;你看不见我🙈&#x27;</span>, <span class="attr">species</span>: <span class="string">&#x27;human&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;票票&#x27;</span>, <span class="attr">src</span>: <span class="string">&#x27;images/littlePiao.jpeg&#x27;</span>, <span class="attr">des</span>: <span class="string">&#x27;我闻到小鱼干的味道了！&#x27;</span>, <span class="attr">species</span>: <span class="string">&#x27;cat&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;刘圆圆&#x27;</span>, <span class="attr">src</span>: <span class="string">&#x27;images/weibonowt.jpg&#x27;</span>, <span class="attr">des</span>: <span class="string">&#x27;一只坏喵。&#x27;</span>, <span class="attr">species</span>: <span class="string">&#x27;cat&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;陈方方&#x27;</span>, <span class="attr">src</span>: <span class="string">&#x27;images/weibonowd.jpg&#x27;</span>, <span class="attr">des</span>: <span class="string">&#x27;一条咸鱼。&#x27;</span>, <span class="attr">species</span>: <span class="string">&#x27;human&#x27;</span>&#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>选择 DOM 元素。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oSearch = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;search-box&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>渲染函数：将数据插入到 HTML 页面。</p><ul><li>4-8 行如果不换行写是这样：字符串 + 变量 + 字符串 + 变量 + 字符串 + 变量 + 字符串</li><li><code>&#39;&lt;li&gt;&lt;img src=&#39; + elem.src + &#39;&gt;&lt;p class=&quot;username&quot;&gt;&#39; + elem.name + &#39;&lt;/p&gt;&lt;p class=&quot;des&quot;&gt;&#39; + elem.des + &#39;&lt;/p&gt;&lt;/li&gt;&#39;</code></li><li>先用字符串拼接起来，然后通过 innerHTML 添到 ul 标签内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderList</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">        str += <span class="string">&#x27;&lt;li&gt;\</span></span><br><span class="line"><span class="string">                    &lt;img src=&#x27;</span> + elem.src + <span class="string">&#x27;&gt;\</span></span><br><span class="line"><span class="string">                    &lt;p class=&quot;username&quot;&gt;&#x27;</span> + elem.name + <span class="string">&#x27;&lt;/p&gt;\</span></span><br><span class="line"><span class="string">                    &lt;p class=&quot;des&quot;&gt;&#x27;</span> + elem.des + <span class="string">&#x27;&lt;/p&gt;\</span></span><br><span class="line"><span class="string">        &lt;/li&gt;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    oUl.innerHTML = str;</span><br><span class="line">&#125;</span><br><span class="line">renderList(personArr);</span><br></pre></td></tr></table></figure><p>设定全局变量：</p><ul><li>对于这类标记了一些信息且需要写在全局的变量，最好使用对象收纳起来</li><li>intoText：监听文本框输入的值<code>state.intoText = this.value;</code></li><li>intoSpec：监听点击的 span 对应的 species 值<code>state.intoSpec = event.target.getAttribute(&#39;species&#39;);</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">    <span class="attr">intoText</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">intoSpec</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input 事件：监听输入框文本输入。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oSearch.oninput = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    state.intoText = <span class="built_in">this</span>.value;</span><br><span class="line">    renderList(lastFilterfn(personArr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 name 筛选数组。函数执行完成后会返回一个筛选后的新数组。</p><ul><li>筛选条件：<code>elem.name.indexOf(text) !== -1 ?</code></li><li>如果未找到项目，<code>Array.indexOf()</code>会返回 -1。所以我们返回能找到的数组成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterText</span> (<span class="params">text, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.name.indexOf(text) !== -<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>click 事件：监听鼠标点击。</p><ul><li>点击事件绑定在父元素 p 标签上，冒泡到子元素 span 标签上</li><li>如果点击到间隙就会点到 p 标签上，所以需要先判断是否点击的是 span 标签</li><li>event.target：事件源对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addEvent(oP, <span class="string">&#x27;click&#x27;</span>, opClick);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opClick</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span>(event.target.nodeName == <span class="string">&#x27;SPAN&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;active&#x27;</span>)[<span class="number">0</span>].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        event.target.className = <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line">        state.intoSpec = event.target.getAttribute(<span class="string">&#x27;species&#x27;</span>);</span><br><span class="line">        renderList(lastFilterfn(personArr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据物种 Species 来筛选。函数执行完成后会返回一个筛选后的新数组。</p><ul><li>点击 All，监听到的 intoSpec 值为 a，数组全部返回即可</li><li>否则根据传入值判断，符合条件（监听到的 intoSpec 值等于数组成员的 species 值）的数组成员留下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterSpecies</span> (<span class="params">spec, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(spec == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> elem.species == spec;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并筛选。</p><ul><li>比如筛选 human 中的 ‘豆’：点击‘Human’，先触发 click 事件，执行 filterSpecies 函数，找到 species = human 的数组成员，然后<strong>拿着已经筛选过的数组</strong>，输入关键字‘豆’，触发 input 事件，执行 filterText 函数，找到 name 中有‘豆’的成员，最后执行函数 renderList 渲染到页面。</li><li>比如筛选姓‘刘’的 human：输入关键字‘刘’，触发 input 事件，执行 filterText 函数，找到所有 name 中有‘刘’的成员。然后在这个基础之上，点击‘Human’，触发 click 事件，也就是拿着已经筛选过的数组执行 filterSpecies 函数，找到 species = human 的数组成员，最后执行函数 renderList 渲染到页面。</li><li>也就是说，当某个事件触发后，我想在这个基础之上去触发另一个事件，最好的办法就是在已经筛选的数组之上，再进行一次筛选就可以了。</li><li>即在 click 事件中，执行一遍 filterText 函数，再拿着它返回的数组 lastArr 执行一遍 filterSpecies 函数，最后执行 renderList 函数。在 input 事件中也添加同样的操作，触发顺序不影响。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastArr = filterText(intoText, personArr);</span><br><span class="line">lastArr = filterSpecies(intoSpec, lastArr);</span><br><span class="line">renderList(lastArr);</span><br></pre></td></tr></table></figure><ul><li>两个事件中增加一样的代码，这种情况下我们可以将它打包成一个函数，直接调用。</li></ul><p>合并筛选函数：</p><ul><li><p>对象  json 中的属性名需和对象 state 的属性名一样，因为在<code>json[prop](state[prop], lastArr)</code>这条语法中，它们共用了一个 prop 名。</p></li><li><p>函数 unionFilterFn 执行完成后会 return 一个函数出来，让 lastFilterfn 等于这个函数。</p></li><li><p>lastFilterfn 传入要处理的数组 personArr，执行完成后会返回新一个数组 lastArr。</p></li><li><p>最后让函数 renderList 将这个新数组渲染到页面即可：<code>renderList(lastFilterfn(personArr));</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unionFilterFn</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lastArr = arr;</span><br><span class="line">        <span class="keyword">for</span>(prop <span class="keyword">in</span> json) &#123;</span><br><span class="line">            lastArr = json[prop](state[prop], lastArr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastArr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lastFilterfn = unionFilterFn(&#123;<span class="attr">intoText</span>: filterText, <span class="attr">intoSpec</span>: filterSpecies&#125;);</span><br></pre></td></tr></table></figure><p>注意，无论是 input 事件还是 click 事件，都只是为了监听输入的文字或点击的标签，然后给筛选函数传值的。比如我输入名字（oninput）传了 intoText 值进来，然后又点击标签（onclick）传了 intoSpec 值进来，执行顺序为：oninput -&gt; intoText -&gt; onclick -&gt; intoSpec。所以在一个事件中筛选完名字后接着筛选物种，只是改变了数组，监听的值早就传了。</p>]]></content>
    
    
    <summary type="html">数组｜类数组</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(五)对象</title>
    <link href="https://cnlmx.top/post/7aae/"/>
    <id>https://cnlmx.top/post/7aae/</id>
    <published>2019-09-20T01:29:00.000Z</published>
    <updated>2021-07-19T07:03:44.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建和操作"><a href="#创建和操作" class="headerlink" title="创建和操作"></a>创建和操作</h2><p>例如一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mrPiao = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;票&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">health</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="attr">eat</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I am eating&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.health --;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">drink</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I am drink&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.health ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增删改查：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mrPiao.toy = <span class="string">&#x27;逗猫棒&#x27;</span>; <span class="comment">// 增</span></span><br><span class="line"><span class="keyword">delete</span> mrPiao.sex;  <span class="comment">// 删</span></span><br><span class="line">mrPiao.age = <span class="number">2</span>; <span class="comment">// 改</span></span><br><span class="line"><span class="built_in">console</span>.log(mrPiao.health); <span class="comment">// 查</span></span><br></pre></td></tr></table></figure><p>访问一个对象没有的属性时，会返回<code>undefined</code>。</p><p>创建对象目前有三种方法：</p><ol><li>对象字面量，又叫对象直接量（Plain Object），直接写即可。如 <code>var object = &#123;&#125;</code></li><li>构造函数。构造函数又分为系统自带和自定义。</li><li>Object.create(原型) 方法。</li></ol><p>通过<code>Object.create(原型)</code>方法创建对象：</p><ol><li>自己指定原型：<code>var tuan = &#123;...&#125;</code></li><li>创建一个对象并将原型写入：<code>var piao = Object.creat(tuan)</code></li><li>此时<code>piao</code>就为一个对象，它的原型是<code>tuan</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tuan = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&#x27;团&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> piao = <span class="built_in">Object</span>.create(tuan);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(piao)); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(piao.__proto__); <span class="comment">// &#123; name: &#x27;团&#x27;, age: 1 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="系统自带的构造函数"><a href="#系统自带的构造函数" class="headerlink" title="系统自带的构造函数"></a>系统自带的构造函数</h3><p><code>Object(); Array(); Number(); Boolean(); Date();</code></p><p>构造函数前面加一个<code>new</code>，就可以返回一个对象，然后通过变量接收即可。如：<code>var obj = new Object();</code></p><p>构造函数创建的对象，和对象字面量创建的对象没有区别。构造函数就像一个工厂，每执行一次，就创建一个对象。每次创建的对象，一模一样但相互独立。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bol = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出对象，可增加属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// Number &#123;123&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// String &#123;&quot;abcd&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(bol); <span class="comment">// Boolean &#123;true&#125;</span></span><br><span class="line"></span><br><span class="line">num.name = <span class="string">&#x27;豆&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// Number &#123;123, name: &quot;豆&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num * <span class="number">2</span>); <span class="comment">// 246</span></span><br></pre></td></tr></table></figure><h3 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h3><p>由于构造函数和函数在结构上没有任何区别，所以为了区分，构造函数命名需要严格遵守大驼峰式命名规则：从第一个单词开始首字母大写。</p><p>依然使用<code>new</code>操作符生成对象。</p><p>具体步骤：</p><ol><li>创建一个构造函数，里面写共有属性。</li><li>通过<code>new</code>返回一个对象，用变量接收。执行一次返回一个对象。</li><li>可以单独为这个对象增加属性，不影响返回的其他对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(); </span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">&#x27;团&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">// Person &#123; age: 3, name: &#x27;团&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1);<span class="comment">// Person &#123; age: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h3><p>没有<code>new</code>操作符的话，就按照函数正常执行。</p><p>有<code>new</code>操作符时，系统会执行如下三步：</p><ol><li>在函数体最前面隐式的加上一个对象：<code>this = Object.create(构造函数.prototype) = &#123;&#125;;</code></li><li>执行 <code>this.xxx = xxx;</code></li><li>隐式的返回 this：<code>return this;</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var this = Object.create(Student.prototype) = &#123;&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.grade = <span class="number">2019</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&#x27;团&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;female&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student); <span class="comment">// Student &#123;name: &#x27;团&#x27;, age: 3, sex: &#x27;female&#x27;, grade: 2019&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在构造函数内可以增加属性，还可以设置参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.grade = <span class="number">2019</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">&#x27;团&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;female&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student); <span class="comment">// Student &#123;name: &#x27;团&#x27;, age: 3, sex: &#x27;female&#x27;, grade: 2019&#125;</span></span><br></pre></td></tr></table></figure><p>如果对象的属性不存在，直接访问的话，会返回 “undefined”。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> Person(); </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(obj); <span class="comment">// Person &#123; age: 3 &#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在构造函数过程中，如果强制显式的返回一个引用值，可以将隐式返回的<code>this</code>覆盖。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, height</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.say);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>: <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;王&#x27;</span>, <span class="number">180</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; a: &#x27;b&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>但如果是强制显式返回原始值，那么就无法覆盖，依然输出隐式的<code>this</code>。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, height</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.say);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;王&#x27;</span>, <span class="number">180</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// Person &#123;name: &#x27;王&#x27;, height: 180, say: f&#125;</span></span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>只有对象才有属性和方法，原始值不能有。</p><p>数字 number 包含原始值数字和数字对象。</p><ul><li>原始值数字不能有属性和方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">num.name = <span class="string">&#x27;数字&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.name); <span class="comment">// undefiend</span></span><br></pre></td></tr></table></figure><ul><li>数字对象<code>new Number(...)</code>可以有属性和方法，且可以参与运算。不过运算完成后，它会变成原始值数字。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字对象：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>); </span><br><span class="line"></span><br><span class="line">num.name = <span class="string">&#x27;数字&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// Number&#123;123, name: &#x27;数字&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num * <span class="number">2</span>); <span class="comment">// 246</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>( num * <span class="number">2</span>)); <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>字符串 string 包含原始值字符串和字符串对象。</p><ul><li>原始值字符串不能有属性和方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line">str.name = <span class="string">&#x27;字符串&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.name); <span class="comment">// undefiend</span></span><br></pre></td></tr></table></figure><ul><li>字符串对象<code>new String(...)</code>可以有属性和方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br><span class="line">str.name = <span class="string">&#x27;字符串&#x27;</span>;</span><br><span class="line">str.sayValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// String &#123;&quot;abcd&quot;, name: &quot;字符串&quot;, sayValue: f&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = str.sayValue();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 字符串</span></span><br></pre></td></tr></table></figure><p>布尔 boolean 同上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bol = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">bol.name = <span class="string">&#x27;布尔&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bol); <span class="comment">// Boolean &#123;true, name: &quot;布尔&quot;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>null 和 undefined 只有原始值，它们不会经过包装类，也就不会有对象，进而不会有原型，而对象的最终原型里的<code>toString()</code>方法也就无法使用。</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span>.name = <span class="string">&#x27;空&#x27;</span>; <span class="comment">// 报错：Uncaught TypeError: Cannot set property &#x27;name&#x27; of null</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span>.name = <span class="string">&#x27;未定义&#x27;</span>; <span class="comment">// 报错：Uncaught TypeError: Cannot set property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure><h3 id="原始值与包装类"><a href="#原始值与包装类" class="headerlink" title="原始值与包装类"></a>原始值与包装类</h3><p>原始值不能有属性和方法，但是往原始值上面加了属性后没有报错，是因为经历了包装类的过程：</p><ol><li>第一步：原始值调用属性<code>num.len = 3;</code>，系统隐式地自动新增一个数字对象并赋值：<code>new Number(num).len = 3; </code>，紧接着将它删除：<code>delete</code>。</li><li>第二步：当你访问<code>num.len</code>这个属性时，系统又重新建立一个数字对象：<code>new Number(num).len</code>给你访问。</li><li>结果：访问一个对象没有的属性时，会输出<code>undefined</code>。</li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">num.len = <span class="number">3</span>; <span class="comment">// new Number(num).len = 3; delete</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//new Number(num).len（这个 len 属性是自定义的，系统没有，所以访问不到)</span></span><br><span class="line"><span class="built_in">console</span>.log(num.len); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>经历过包装类后，不会报错，但最后结果一定是<code>undefined</code>。</p></blockquote><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例一：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用值</span></span><br><span class="line"><span class="comment">// 数组，通过 length 进行截断操作：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.length = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始值</span></span><br><span class="line"><span class="comment">// 字符串的 length 是在系统自动新增的字符串对象上截断，紧接着就删除了，和原来的字符串没关系：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line">str.length = <span class="number">2</span>; <span class="comment">// new String(&#x27;abcd&#x27;).length = 2; delete  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// abcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new String(&#x27;abcd&#x27;).length</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 4 （字符串对象自带 length 属性，可以访问但截断的不是它）</span></span><br></pre></td></tr></table></figure><p>综合考察：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包和构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// var this = &#123;&#125;;</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sss</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a ++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.say = sss; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数 sss 是对象 this 的属性，因为隐式的 return this，所以会被返回出去，由此它与构造函数 Person 形成闭包</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oPerson = <span class="keyword">new</span> Person();</span><br><span class="line">oPerson.say(); <span class="comment">// 1</span></span><br><span class="line">oPerson.say(); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新执行一次构造函数 Person，生成新的执行期上下文，和第一次的作用域链没关系</span></span><br><span class="line"><span class="comment">// 产生新的对象，新的闭包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oPerson1 = <span class="keyword">new</span> Person();</span><br><span class="line">oPerson1.say(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对象的创建和使用</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(四)闭包</title>
    <link href="https://cnlmx.top/post/1f0e/"/>
    <id>https://cnlmx.top/post/1f0e/</id>
    <published>2019-09-07T12:08:33.000Z</published>
    <updated>2021-07-19T07:03:44.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>此类函数没有声明，在一次执行后即释放。是针对初始化功能的函数，适合做初始化工作。</p><p>立即执行函数和普通函数的唯一区别就在此：前者在一次执行后会释放，不能被反复调用，而普通函数会一直等待被执行。除此之外没有任何其他区别。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>第一种：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>第二种：（W3C 建议使用）</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>如果需要返回值：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// num 用于接收返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">形参</span>) </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ..;</span><br><span class="line">&#125;(实参));</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>只有表达式才能被执行符号<code>()</code>执行。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;();</span><br><span class="line"><span class="comment">// 报错：Uncaught SyntaxError: Unexpected token )</span></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();<span class="comment">// 正常执行，test 就是一个表达式</span></span><br></pre></td></tr></table></figure><p>能被执行符号执行的表达式，函数名会被自动忽略。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 输出 a</span></span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><p>有一种情况，函数声明和执行符号在一起，执行符号内填写了实参，系统运行时不会报错，会将执行符号识别为逗号运算符和小括号一起组成的表达式，如：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, d, c, d</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统会认为：</span></span><br><span class="line"><span class="comment">//这个是函数声明：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个是表达式（逗号运算符的表现形式）：</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终，不会输出结果，也不会报错。</span></span><br></pre></td></tr></table></figure><blockquote><p>要在函数体后面加括号就能立即调用，则这个函数必须是函数表达式，不能是函数声明。（函数声明会被 js 解析时提升）</p></blockquote><p>()、!、+、-、= 等运算符，都可以将函数声明转换成表达式，然后在后面加执行符号<code>()</code>，就可以变成立即执行函数。如：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// () 运算符（包含着 function 的最外面那个括号）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 123</span></span><br><span class="line">&#125;)(<span class="number">123</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// () 运算符（包含着 function 和执行符号的最外面那个括号）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 1234</span></span><br><span class="line">&#125;(<span class="number">1234</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ! 运算符</span></span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 12345</span></span><br><span class="line">&#125;(<span class="number">12345</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// + 运算符</span></span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 123456</span></span><br><span class="line">&#125;(<span class="number">123456</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// - 运算符</span></span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 1234567</span></span><br><span class="line">&#125;(<span class="number">1234567</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// = 运算符</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);   <span class="comment">// 12345678</span></span><br><span class="line">&#125;(<span class="number">12345678</span>);</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>内部的函数被保存到外部，一定生成闭包。</p><p>该函数在外部执行时，一定能调用它原来的没被保存出去时的函数环境里的变量。</p><h3 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h3><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用链不释放，造成内存泄漏 Memory leak（过多占用内存）。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例一：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;                           <span class="comment">// a 定义并开始执行  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;                       <span class="comment">// b 定义      </span></span><br><span class="line">        <span class="keyword">var</span> bbb = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(aaa);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">var</span> aaa = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">return</span> b;                            <span class="comment">// b 作为 a 的结果被保存出去，此时 b 带着 a 的作用域链（b 只被定义，没被执行）   </span></span><br><span class="line">&#125;                                        <span class="comment">// a 执行完成，它与自己的 AO 链接被砍断（引用地址销毁）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> glob = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> demo = a();                          <span class="comment">// a 执行后的结果是 b，存到 demo 中</span></span><br><span class="line">demo();                                  <span class="comment">// 执行 b，执行结果为 123</span></span><br></pre></td></tr></table></figure><p>例二：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num ++;  </span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = a(); <span class="comment">// 把 b 的地址引用赋值给 demo</span></span><br><span class="line">demo(); <span class="comment">// 101</span></span><br><span class="line">demo() ;<span class="comment">// 102</span></span><br></pre></td></tr></table></figure><ul><li>b 被保存出去的时候带着的是 a 的作用域链。</li><li>demo 第一次执行时，增加 b 的 AO 到作用域链第 0 位，然后依次向下去找 num。</li><li>num = 100 在 b 继承的 aAO 里面，所以将其中的 num 修改为 101。</li><li>执行完成后，b 的 AO 被销毁，其他的作用域链 b 依然带着。</li><li>b 第二次执行时，是相同的操作，此时 num 的基础值是 101，执行 b 后 num ++ = 102</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>定义一个空数组 <code>arr = []</code>  (1*)</p><p>for 循环将十条数据添加到数组 arr 中，每条数据都是一个 function  (2*)</p><ul><li><code>arr[i]</code>中的 i 会跟着 for 循环中的 i 变动</li><li>而函数<code>function ()&#123;console.log(i)&#125;</code>没有在当前执行，所以函数体内部的 i 不会随之变动，这个 i 在<strong>函数执行时才会赋值</strong></li><li><code>arr[i] = 函数</code>，数组位置会马上变现：<code>arr[0],arr[1]...</code>，函数<code>function()(...)</code>只是单纯赋值给数组，当前不会被执行： <code>arr[0] = function()&#123;console.log(i);&#125;</code> ……</li><li>i = 10 时，for 循环终止</li></ul><p>将 arr 返回到外部，这==十个函数带着 test 的作用域链==被保存出去  (3*)</p><ul><li><code>arr = [function()&#123;console.log(i);&#125;, function()&#123;console.log(i);&#125;,..., function()&#123;console.log(i);&#125;]</code></li></ul><p>test 函数执行完成，它与自己的 AO 链接被砍断（地址引用销毁），此时 i 为 10  (4*)</p><p>分别执行保存出去的十个函数  (5*)</p><p>这十个函数都与 test 函数形成了闭包，它们共用的是 test 的作用域链（变量<code>arr</code>、<code>i</code>），所以在外部访问 i 变量时，访问的是 test 里的 i （也就是同一个 i ），它们自己的函数内部没有变量。</p><p>此时的 i 变量，是在 test 函数执行完成后的 i ，即 i = 10</p><p>arr 中的十个函数都是为了输出 i，在外部去访问 i 时，i 为 10，所以会输出十个 10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];                                       <span class="comment">// 1*</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;                        <span class="comment">// 2*</span></span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;                                         <span class="comment">// 3*</span></span><br><span class="line">&#125;                                                       <span class="comment">// 4*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    myArr[j]();                                         <span class="comment">// 5*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：10 10 10 10 10 10 10 10 10 10 </span></span><br></pre></td></tr></table></figure><h4 id="解决：立即执行函数"><a href="#解决：立即执行函数" class="headerlink" title="解决：立即执行函数"></a>解决：立即执行函数</h4><p>引入立即执行函数<code>(function (j)&#123;...&#125;(i));</code>   (1*)</p><p>for 循环执行，i = 0 时，立即执行函数中的实参 i 为 0，赋值给形参 j，此时 j = 0，依此类推，每次 i 的值都会被赋到相应的 j 上面  (2*)</p><ul><li>for 循环执行 10 次，会产生 10 个独立的不同的立即执行函数</li><li><code>arr[0] = function()&#123;console.log(j);&#125;</code>、<code>arr[1] = function()&#123;console.log(j);&#125; </code>……</li><li>同样，立即执行函数内的函数<code>function ()&#123;...&#125;</code>没有在当前执行</li><li>i = 10 时，for 循环终止</li></ul><p>将 arr 返回到外部，十个函数带着各自的立即执行函数的作用域链被保存出去  (3*)</p><ul><li><code>arr = [function()&#123;console.log(j);&#125;, function()&#123;console.log(j);&#125;,..., function()&#123;console.log(j);&#125;]</code></li></ul><p>test 函数执行完成，它与自己的 AO 链接被砍断（地址引用销毁），此时 i 为 10  (4*)</p><p>分别执行这十个函数  (5*)</p><p>被保存出去的十个函数都与各自的立即执行函数形成了闭包，它们带出去的是各自的立即执行函数<code>(function(j)&#123;...&#125;(i));</code>的作用域链（变量<code>j</code>、<code>arr</code>、<code>i</code>），<code>i</code>和<code>arr</code>在 test 函数的 AO 中，<code>j</code>在立即执行函数的 AO 中。所以在外部访问 i 变量时，访问的依然是 test 函数的 i ，而 j 变量则是各自立即执行函数里的 j</p><p>i = 0 时，j = 0，即第一个立即执行函数中的 j 为 0，执行完成后销毁。i = 1 时，又是一个全新的立即执行函数，此时 j = 1。依此类推，被保存出去的函数，对应的是不同的 j ，相同的 i</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;                                 <span class="comment">// 1*</span></span><br><span class="line">            arr[j] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i));                                          <span class="comment">// 2*</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;                                         <span class="comment">// 3*</span></span><br><span class="line">&#125;                                                       <span class="comment">// 4*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++)&#123;</span><br><span class="line">    myArr[x]();                                         <span class="comment">// 5*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure></code></pre><blockquote><p>关键点：将每一次 i 的值立马套现到 j 里面，然后让每个函数带着不同的 j 走</p></blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h4 id="实现共有变量"><a href="#实现共有变量" class="headerlink" title="实现共有变量"></a>实现共有变量</h4><p>如：函数累加器。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count ++; <span class="comment">// demo 函数中没有变量，这个是针对 add 函数里的 count 变量的操作</span></span><br><span class="line">        <span class="built_in">console</span>.log(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> demo;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">var</span> counter = add();</span><br><span class="line">counter();<span class="comment">// 1</span></span><br><span class="line">counter();<span class="comment">// 2</span></span><br><span class="line">counter();<span class="comment">// 3</span></span><br><span class="line">counter();<span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="做缓存（存储结构）"><a href="#做缓存（存储结构）" class="headerlink" title="做缓存（存储结构）"></a>做缓存（存储结构）</h4><p>函数 a 和 b 被保存出去的时候，带着的是同一套作用域链（都是 test 的，在同一个房间，同一个地址引用）</p><p>a 执行 时 num 被修改为 101，那么 b 作用域链中的 num 也会变为 101</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">      <span class="comment">// a defined   a.[[scope]]    0: testAO</span></span><br><span class="line">      <span class="comment">//                            1: GO</span></span><br><span class="line">        num ++;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// b defined   b.[[scope]]     0: testAO</span></span><br><span class="line">      <span class="comment">//                             1: GO</span></span><br><span class="line">        num --;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [a,b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"></span><br><span class="line">myArr[<span class="number">0</span>](); <span class="comment">// a 函数执行 -&gt; 结果 101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a doing   a.[[scope]]     0: aAO</span></span><br><span class="line"><span class="comment">//                           1: testAO *</span></span><br><span class="line"><span class="comment">//                           2: GO</span></span><br><span class="line"></span><br><span class="line">myArr[<span class="number">1</span>](); <span class="comment">// b 函数执行 -&gt; 结果 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b doing   b.[[scope]]     0: bAO</span></span><br><span class="line"><span class="comment">//                           1: testAO *</span></span><br><span class="line"><span class="comment">//                           2: GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * b 使用的 testAO 是 a 执行后修改的 testAO</span></span><br></pre></td></tr></table></figure><p>被保存出去的函数内部没有定义变量，修改的都是 test 函数里的变量 food</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eater</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> food = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">eatFood</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(food != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;I am eating &#x27;</span> + food);</span><br><span class="line">                food = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Nothing!&#x27;</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">pushFood</span> : <span class="function"><span class="keyword">function</span> (<span class="params">myFood</span>) </span>&#123;</span><br><span class="line">            food = myFood;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = eater();</span><br><span class="line"></span><br><span class="line">person.eatFood(); <span class="comment">// I am eating apple</span></span><br><span class="line"></span><br><span class="line">person.eatFood(); <span class="comment">// Nothing!</span></span><br><span class="line"></span><br><span class="line">person.pushFood(<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line">person.eatFood(); <span class="comment">// I am eating banana</span></span><br><span class="line"></span><br><span class="line">person.eatFood(); <span class="comment">// Nothing!</span></span><br></pre></td></tr></table></figure><h4 id="实现封装，属性私有化"><a href="#实现封装，属性私有化" class="headerlink" title="实现封装，属性私有化"></a>实现封装，属性私有化</h4><p>隐式对象<code>this</code>被保存出去，它包含的两个方法（函数）<code>changeUseCard</code>以及<code>sayUseCard</code>带着同一套作用域链出去（函数<code>BankCard</code>的）。</p><p>变量<code>useCard</code>在函数外部是无法访问到的，但是函数内的方法可以直接使用它。</p><p>它成为对象和原有函数形成闭包后存在的一个私有变量。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BankCard</span>(<span class="params">name, card</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> useCard = <span class="string">&#x27;Visa&#x27;</span>; <span class="comment">// 构造函数内声明并赋值的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.card = card;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.changeUseCard = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        useCard = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.sayUseCard = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(useCard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dou = <span class="keyword">new</span> BankCard(<span class="string">&#x27;dou&#x27;</span>, <span class="string">&#x27;Master&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dou); <span class="comment">// &#123;name: &#x27;dou&#x27;, card: &#x27;Master&#x27;, changeUseCard: f, sayUseCard: f&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dou.useCard); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">dou.sayUseCard(); <span class="comment">// Visa</span></span><br><span class="line"></span><br><span class="line">dou.changeUseCard(<span class="string">&#x27;Apple Card&#x27;</span>);</span><br><span class="line"></span><br><span class="line">dou.sayUseCard(); <span class="comment">// Apple Card</span></span><br></pre></td></tr></table></figure><h4 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h4><p>实现模块化开发，防止污染全局变量。（详见命名空间）</p>]]></content>
    
    
    <summary type="html">立即执行函数｜闭包</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(三)函数</title>
    <link href="https://cnlmx.top/post/b323/"/>
    <id>https://cnlmx.top/post/b323/</id>
    <published>2019-08-25T08:21:35.000Z</published>
    <updated>2021-07-19T07:03:44.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>函数主要用于减少重复代码。</p><p>在 JavaScript 中，函数是头等对象，因为它们可以像任何其他对象一样具有属性和方法。它们与其他对象的区别在于函数可以被调用。简而言之，它们是<code>Function</code>对象。</p><p>定义一个函数并不会自动的执行它。定义了函数仅仅是赋予函数以名称并明确函数被调用时该做些什么。调用函数才会以给定的参数真正执行这些动作。</p><h3 id="两种定义形式"><a href="#两种定义形式" class="headerlink" title="两种定义形式"></a>两种定义形式</h3><p>函数声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名 (<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>, ...</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数表达式</p><ul><li>命名函数表达式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>, ...</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数名仅用作函数名称，并不执行，也不一定要和变量名一样</span></span><br><span class="line"><span class="comment">// 变量名.name = 函数名</span></span><br></pre></td></tr></table></figure><ul><li>匿名函数表达式 — 常用，故后续直接叫函数表达式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>, ...</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量名.name = 函数名</span></span><br></pre></td></tr></table></figure><p>关于函数名和变量名：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(test.name); <span class="comment">// fnName</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(demo.name); <span class="comment">// demo</span></span><br></pre></td></tr></table></figure><p>表达式的值就是函数本身。函数表达式就是创建一个函数，将其赋值给变量，用<code>变量名()</code>来调用。函数是一个引用类型，将其赋值给某个变量时，变量中保存的是函数的地址。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span>(foo); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(foo)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(f()); <span class="comment">// function</span></span><br></pre></td></tr></table></figure><blockquote><p>命名函数表达式的识别名（也就是上例的函数名），它的作用域只能在函数的主体(FunctionBody)内部，真正的函数识别名称是被赋值的那个变量识别名（也就是变量名）。</p></blockquote><h3 id="组成形式"><a href="#组成形式" class="headerlink" title="组成形式"></a>组成形式</h3><p>函数名称。</p><p>参数：不限制数据类型、不限制参数多少。</p><ul><li><p>形式参数：相当于 var 声明变量。<code>形参长度 = 函数名.length</code></p></li><li><p>实际参数：实际参数列表 arguments，类似数组，会将所有实际参数存储起来。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test -&gt; 函数名称</span></span><br><span class="line"><span class="comment">// a,b -&gt; 形式参数</span></span><br><span class="line"><span class="comment">// 1,2 -&gt; 实际参数</span></span><br></pre></td></tr></table></figure><p>在形式参数和实际参数长度完全相等的时候，<code>arguments</code>和实际参数有一个映射规则，如果<code>arguments</code>内的参数发生变化，相应的实际参数也会改变。反之同理。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实参改变，arguments 内的参数也随之改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    a = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 内参数改变，实参也随之改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><code>arguments</code>一开始有多少位参数，就会一直保持这个长度，如果实参数量小于形参，后续增加的实际参数不会添到列表里，即此时不会存在映射关系。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>返回值：需要函数有返回值的时候，可以在函数体里使用<code>return</code>语句。<code>return</code>既可以终止函数，还可以得到函数返回值。</p><ul><li>终止函数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终止函数，console.log(&#x27;b&#x27;); 不会被执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// a</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>函数返回值：将一个值返回到函数外面。记得要找一个变量接收它。这个时候既终止了函数，又得到了函数返回值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNumber</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> +target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = myNumber(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num); <span class="comment">// number 123</span></span><br></pre></td></tr></table></figure><blockquote><p>如果<code>return</code>后面不跟任何数据，或者函数中没有 <code>return</code>语句，则该函数会在末尾自动 return undefined。如果找一个变量接收它，就会得到 undefined 的结果。</p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归只是让函数更加简洁，并没有减少响应时间，所以特别复杂的程序不能使用递归。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>写一个函数，实现斐波那契数列（1、1、2、3、5、8……）。</p><p>找规律：<code>fb(n) = fb(n - 1) + fb(n - 2);</code></p><ul><li>发现可以采用递归 -&gt; return 公式：<code>return fb(n - 1) + fb(n - 2);</code></li><li>测试公式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fb(<span class="number">5</span>) =&gt; fb(<span class="number">4</span>) + fb(<span class="number">3</span>);</span><br><span class="line">fb(<span class="number">4</span>) =&gt; fb(<span class="number">3</span>) + fb(<span class="number">2</span>);</span><br><span class="line">fb(<span class="number">3</span>) =&gt; fb(<span class="number">2</span>) + fb(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>找出口：<code>n === 1 || n === 2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = fb(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>每个函数都是一个对象，对象中有些属性我们可以访问，有些不可以。这些不可访问的属性仅供 JS 引擎存取，<code>[[scope]]</code>就是其中一个。**<code>[[scope]]</code>指的就是我们所说的作用域，其中存储了运行期（执行期）上下文的集合**。</p><h3 id="执行期上下文"><a href="#执行期上下文" class="headerlink" title="执行期上下文"></a>执行期上下文</h3><p>当函数执行时，会创建一个称为执行期上下文的内部对象（AO）。一个执行期上下文定义了一个函数执行时的环境，函数==每次执行时对应的执行上下文都是独一无二的==，所以<strong>多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。</strong></p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p><code>[[scope]]</code>中所存储的执行期上下文的对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。</p><h3 id="查找变量"><a href="#查找变量" class="headerlink" title="查找变量"></a>查找变量</h3><p>在哪个函数里查找变量，就从该函数的作用域链的顶端依次向下查找。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>函数如下：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>a 函数在被定义时，<code>a.[[scope]]</code>里第 0 位存储了全局的执行期上下文（GO）。</p><p>a 函数执行时，它的执行期上下文（AO）放入<code>a.[[scope]]</code>里的顶端，即第 0 位，GO 下移一位，到第 1 位。</p><p>此时若在 a 函数里查找一个变量，就需要在 a 的作用域链里查找，先在第 0 位 AO 中找，没有的话再去第 1 位 GO 中找。</p><p>而对于 a 函数中的 b 函数，==a 函数执行时，b 函数被定义==，此时 b 函数的全局执行期上下文就是 a 的作用域链，即<code>b.[[scope]] === a.[[scope]]</code>（同一个作用域链，是同一个房间内的）。</p><p>b 函数执行时，它的执行期上下文放入<code>b.[[scope]]</code>的第 0 位，原有的依次下移一位。</p><p>b 函数执行完毕后，销毁它自己的 AO（链接被砍断，也就是删除引用），b 又回到被定义状态，等待下一次被执行。</p><p>a 函数执行完毕后，销毁它自己的 AO，由于引用被删除，AO 里面的 b 函数和 c 函数都被砍断，所以这俩函数都没了。a 回到了被定义状态，等待下一次被执行。当 a 函数需要再次执行时，又会生成新的 AO（里面又会有新的 b 函数和 c 函数出现）。</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a defined（定义）    a.[[scope]] -&gt; 0 : GO</span><br><span class="line"></span><br><span class="line">a doing（执行）      a.[[scope]] -&gt; 0 : aAO</span><br><span class="line">                                   1 : GO</span><br><span class="line"></span><br><span class="line">b defined           b.[[scope]] -&gt; 0 : aAO</span><br><span class="line">                                   1 : GO</span><br><span class="line"></span><br><span class="line">b doing             b.[[scope]] -&gt; 0 : bAO</span><br><span class="line">                                   1 : aAO</span><br><span class="line">                                   2 : GO</span><br><span class="line"></span><br><span class="line">c defined           c.[[scope]] -&gt; 0 : bAO</span><br><span class="line">                                   1 : aAO</span><br><span class="line">                                   2 : GO</span><br><span class="line"></span><br><span class="line">c doing             c.[[scope]] -&gt; 0 : cAO</span><br><span class="line">                                   1 : bAO</span><br><span class="line">                                   2 : aAO</span><br><span class="line">                                   3 : GO</span><br></pre></td></tr></table></figure><blockquote><p>注意，function 是引用值，即值存储在 heap（堆），而在 stack（栈）里放的是堆地址，也就是引用。</p></blockquote><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><h3 id="JS-运行执行步骤"><a href="#JS-运行执行步骤" class="headerlink" title="JS 运行执行步骤"></a>JS 运行执行步骤</h3><ol><li>语法分析（通篇扫描一遍，看看有没有啥错误）</li><li>预编译</li><li>解释执行</li></ol><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>暗示全局变量（imply global）：任何变量，如果未声明就赋值，那么此变量就为全局对象（window）所有。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 未经声明但直接赋值</span></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 即：</span></span><br><span class="line"><span class="built_in">window</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>所有声明了的全局变量，也为 window 所有。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b 为声明了的全局变量</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">234</span>;</span><br><span class="line"><span class="comment">// 即：</span></span><br><span class="line"><span class="built_in">window</span> = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">234</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.b = <span class="number">234</span>;</span><br></pre></td></tr></table></figure><p>上面两种都是全局对象 window 的属性（属性名+属性值），window 相当于是全局的域。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">// 123 赋值给 b</span></span><br><span class="line"><span class="comment">// 声明 a</span></span><br><span class="line"><span class="comment">// b 赋值给 a</span></span><br><span class="line"><span class="comment">// 导致的结果就是：b 未经声明</span></span><br><span class="line"><span class="comment">// 此时：b 归 window 所有</span></span><br><span class="line"><span class="comment">// a 为局部变量</span></span><br><span class="line"><span class="comment">// c 为全局变量，也归 window 所有</span></span><br></pre></td></tr></table></figure><h3 id="预编译过程"><a href="#预编译过程" class="headerlink" title="预编译过程"></a>预编译过程</h3><h4 id="函数内"><a href="#函数内" class="headerlink" title="函数内"></a>函数内</h4><p>函数内的预编译发生在函数执行的前一刻。</p><p>步骤：找形参和变量声明，值为 undefined -&gt; 实参值传给形参 -&gt; 找函数声明。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123; <span class="comment">// a 形式参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">// 变量声明</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 函数声明</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 变量声明、函数表达式</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 函数声明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>); <span class="comment">// 1 实际参数</span></span><br></pre></td></tr></table></figure><ul><li><p>创建 AO 对象（Activation Object）：执行期上下文，可理解为作用域。</p></li><li><p>找形式参数和变量声明，将形式参数名和变量名作为 AO 属性名，值为  undefined。（变量声明提升）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将实际参数和形式参数统一。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>, <span class="comment">//undefined</span></span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在函数体里找函数声明，将函数名作为 AO 属性名，值为自身的函数体（函数声明提升）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// 1</span></span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">    <span class="comment">//执行，访问 a，输出此时 AO 对象中 a 的值 -&gt; function a() &#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>; </span><br><span class="line">    <span class="comment">//var = a 变量声明已提升，忽略。</span></span><br><span class="line">    <span class="comment">//执行赋值操作，将 123 赋值给 a</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">    <span class="comment">// 输出此时 AO 对象中 a 的值 -&gt; 123</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line">    <span class="comment">// 已提升（提前执行），忽略</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">    <span class="comment">// 输出此时 AO 对象中 a 的值 -&gt; 123</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">    <span class="comment">//var = b 已提升，忽略。</span></span><br><span class="line">    <span class="comment">//执行赋值操作，将 function ()&#123;&#125; 赋值给 b</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="comment">//输出此时 AO 对象中 b 的值 -&gt; function ()&#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AO = &#123;</span></span><br><span class="line"><span class="comment">//     a : 123, // function a() &#123;&#125;</span></span><br><span class="line"><span class="comment">//     b : function ()&#123;&#125;, // undefined</span></span><br><span class="line"><span class="comment">//     d : function d() &#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="全局内"><a href="#全局内" class="headerlink" title="全局内"></a>全局内</h4><p>全局内的预编译发生在全局执行的前一刻。</p><p>步骤：找变量声明，值为 undefined -&gt; 找函数声明。</p><ul><li>创建 GO 对象（Global Object）：全局执行期上下文，可理解为作用域。（GO 就是 window ）</li><li>找变量声明，将变量名作为 GO 属性名，值为 undefined。（变量声明提升）。</li><li>找函数声明，将函数名作为 GO 属性名，值为自身的函数体（函数声明提升）。</li><li>执行。</li></ul><p>GO 发生在全局执行前，AO 发生在函数执行前，如果 AO 内找不到，会直接在 GO 中找。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>通过函数声明定义的函数，会提升到脚本块的顶部。</p><p>通过函数声明定义的函数，会成为全局对象的属性。</p><p>通过函数表达式定义的函数，它既不会提升，也不会污染全局对象。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例一：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GO = &#123;</span></span><br><span class="line"><span class="comment">//     a: 10, // undefined</span></span><br><span class="line"><span class="comment">//     c: 234,</span></span><br><span class="line"><span class="comment">//     test: function test()&#123;...&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">100</span>; <span class="comment">// 预编译环节，不管是否执行，只先拿出所有该拿的：var = b;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">    c = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// 234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AO = &#123;</span></span><br><span class="line"><span class="comment">//     b: undefined</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 234</span></span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GO = &#123;</span></span><br><span class="line"><span class="comment">//     a: 100, // undefined</span></span><br><span class="line"><span class="comment">//     demo: function demo(e)&#123;&#125;,</span></span><br><span class="line"><span class="comment">//     f: 123</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">123</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// if 语句中不能声明 function</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">    f = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AO = &#123;</span></span><br><span class="line"><span class="comment">//     e: 2, // function e()&#123;&#125; // 1 // undefined</span></span><br><span class="line"><span class="comment">//     b: undefined,</span></span><br><span class="line"><span class="comment">//     c: undefined,</span></span><br><span class="line"><span class="comment">//     a: 10//undefined</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>例三：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会进行预编译，所以不会按照视觉上的先后顺序运行</span></span><br><span class="line"><span class="comment">// 两个相同的函数，提升后第一个函数会被第二个函数覆盖掉</span></span><br><span class="line"><span class="comment">// 最终都是第二个函数进行的调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GO = &#123;</span></span><br><span class="line"><span class="comment">//     x: 1, // undefined</span></span><br><span class="line"><span class="comment">//     y: 4, // 0, // undefined</span></span><br><span class="line"><span class="comment">//     z: 4, // 0,</span></span><br><span class="line"><span class="comment">//     add: function add(n)&#123;return n = n + 3&#125; // function add(n)&#123;return n = n + 1&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  n = n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">y = add(x); <span class="comment">// 1 + 3 -&gt; y = 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n = n + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">z = add(x); <span class="comment">// 1 + 3 -&gt; z = 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AO = &#123;</span></span><br><span class="line"><span class="comment">//     n: x // undefined</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x, y, z); <span class="comment">// 1, 4, 4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">函数定义｜作用域｜预编译</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(二)数据类型</title>
    <link href="https://cnlmx.top/post/5714/"/>
    <id>https://cnlmx.top/post/5714/</id>
    <published>2019-08-09T04:53:29.000Z</published>
    <updated>2021-07-19T07:03:44.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>不可改变， 存储在 stack（栈）：先进的后出来。</p><p>值类型：</p><ol><li>Number — 数字</li><li>Boolean — 布尔</li><li>String — 字符串</li><li>undefined — 未定义（未被赋值的变量值输出时会有这个结果）</li><li>null — 空（可以用来占位）</li></ol><h3 id="引用值"><a href="#引用值" class="headerlink" title="引用值"></a>引用值</h3><p>存储在 heap（堆）：怎么进的怎么出。</p><p>值类型：</p><ol><li>Array — 数组</li><li>Object — 对象</li><li>Function — 函数</li><li>RegExp — 正则</li><li>Date — 日期</li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>原始值和引用值唯一的不同是赋值形式不同。</p><p>原始值以值的拷贝方式赋值，原值是不可变的。操作都在副本上。引用值以引用的拷贝方式赋值，原值是可变的。引用的是地址，操作还是在原来的地方，除非换一个地址（赋新值）。</p><h4 id="原始值-1"><a href="#原始值-1" class="headerlink" title="原始值"></a>原始值</h4><p>一旦赋值，不可更改。无论是原值增删，还是新的赋值，都会直接存放到新的地方，原值不动。在操作上，表现为原始值和对应栈名复制一份到新的地方，同时之前的对应栈名初始化，值不动，增删和新赋值都在副本上进行。如：</p><ul><li>在栈内存中声明一个叫 num 的房间，放入值 1</li><li>在栈内存中声明一个叫 num1 的房间，拷贝 num 的值 1 放入 num1</li><li>将 num 及其值 1 拷贝到一个新的房间，然后修改值为 2，原来的房间名初始化为 1005，原值 1 依然留在该房间，不会发生变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>,</span><br><span class="line">      num1 = num;</span><br><span class="line">num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="引用值-1"><a href="#引用值-1" class="headerlink" title="引用值"></a>引用值</h4><p>赋值之后，如果是在原值上增删，会直接修改原值。如果是新的赋值，就会直接存放到新的地方，原值不动。</p><p>原值增删：</p><ul><li>在栈内存中声明一个叫 arr 的房间，在堆内存中一个房间里放入值 [1, 2]，然后 arr 房间内放入这个值的==堆内存地址==<code>heap1001</code></li><li>在栈内存中声明一个叫 arr1 的房间，然后直接拷贝 arr 房间内存放的地址<code>heap1001</code>，获得 arr 的值</li><li>此时 arr 与 arr1 指向同一个值的地址<code>heap1001</code></li><li>arr 增加新值 3，直接在<code>heap1001</code>存放的值里增加，变为 [1, 2, 3]</li><li>此时 arr 与 arr1 共同指向的值变为 [1, 2, 3]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">   arr1 = arr;</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(arr1); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>赋新值：</p><ul><li>在栈内存中声明一个叫 arr 的房间，在堆内存中一个房间里放入值 [1, 2]，然后 arr 房间内放入堆内存地址<code>heap1001</code></li><li>在栈内存中声明一个叫 arr1 的房间，然后直接拷贝 arr 房间内存放的地址，获得 arr 的值</li><li>此时 arr 与 arr1 指向同一个值的地址<code>heap1001</code></li><li>arr 赋新值，在堆内存中另一个房间里放入新值 [1, 2, 3]，然后 arr 房间内删除原来的地址<code>heap1001</code>，放入这个新值的堆内存地址<code>heap1002</code></li><li>此时 arr 指向的值为 [1, 2, 3]，arr1 指向的值为 [1, 2]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">   arr1 = arr;</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">document</span>.write(arr1); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><p>作用：区分数据类型（六种）</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>object（泛指引用值，数组 array 和 null 都属于此类）</li><li>function  </li></ul><p>原始值：<code>number/string/boolean/undefined/null</code></p><p>引用值：<code>array/object/function</code></p><blockquote><p>null 最初是作为代替空对象的形式出现（给对象占位），所以它的数据类型是 object</p></blockquote><p>写法：<code>typeof()</code> 或者 <code>typeof 内容</code></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mul = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> mul); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(arr)); <span class="comment">// objcet</span></span><br></pre></td></tr></table></figure><blockquote><p>任何变量未经声明就使用的话，会直接报错。<br>如果放入 typeof 操作符中，不会报错，会直接返回<code>undefined</code>。<br>这个返回值<code>undefined</code>的类型是字符串。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a),<span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a))); <span class="comment">// undefined string</span></span><br></pre></td></tr></table></figure><p>任何情况下，返回的六种类型的值都是字符串类型。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(str), <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(str))); <span class="comment">// string string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(bool), <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(bool))); <span class="comment">// boolean string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), <span class="keyword">typeof</span>(<span class="keyword">typeof</span>(num))); <span class="comment">// number string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj, <span class="keyword">typeof</span>(<span class="keyword">typeof</span> obj)); <span class="comment">// object string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn, <span class="keyword">typeof</span>(<span class="keyword">typeof</span> fn)); <span class="comment">// function string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>, <span class="keyword">typeof</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>)); <span class="comment">// undefined string</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>Number( )：将括号里的内容转换成数字/数。</p><ul><li><code>undefined、字符串（除了字符串类型的数字）、NaN-&gt; NaN</code> </li><li><code>true -&gt; 1</code></li><li><code>false、&quot;&quot;、null -&gt; 0</code></li><li><code>&quot;123&quot; -&gt; 123（字符串类型的数字直接转换类型，数值不变）</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 布尔类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num),num); <span class="comment">// number 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">&#x27;true&#x27;</span>); <span class="comment">// 字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num),num); <span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123abc&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>parseInt (string, radix)：（integer：整数）</p><ul><li>第一个作用：string 参数，转换成整值（如果前面是数字，从数字位开始看，直到非数字位截止，返回数字位）</li><li>第二个作用：radix 进制，以此进制为基底，将值转换为十进制，取值：2～36，选填。划重点：你填的多少，进制就是多少。从你填的转为十进制。目标进制（你填写的进制） &lt;==&gt; 十进制</li><li>常见转换：<ul><li><code>&quot;123.7&quot;-&gt; 123</code> </li><li><code>&quot;123abc&quot; -&gt; 123（首位是数字的话，从数字位开始看，在非数字位截断）</code></li><li><code>其他 -&gt; NaN</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// number: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;123.9&#x27;</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;123abc&#x27;</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">&#x27;abc123&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// number: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">16</span>); <span class="comment">// a 目前为十六进制数，要转化为十进制数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// number: 10</span></span><br></pre></td></tr></table></figure><p>parseFloat(string)：类似 parseInt 方法，转换成浮点数（正常的小数）。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">&#x27;123.45&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// number: 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">&#x27;123.45abc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// number: 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(<span class="string">&#x27;abc123.45&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// number : NaN</span></span><br></pre></td></tr></table></figure><p>参数.toString(radix)：将参数转换成字符串</p><ul><li>radix 进制，以十进制为基底，转换成填写的进制，选填。<br>十进制&lt;==&gt;目标进制（你填写的进制）划重点：你填的多少，就是想要多少。从十进制转为你填的。</li><li>undefined 和 null 不能用该方法，使用会直接报错（因为它俩没有原型，而其他原始值经过包装类后成为原始值对象，都有原型）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num = demo.toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// string: 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num = demo.toString(<span class="number">16</span>);<span class="comment">// 10 目前为十进制数，要转化为十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// string: a</span></span><br></pre></td></tr></table></figure><blockquote><p>如果直接使用<code>123.toString() </code>是不可以的，会直接报错。因为系统会首先将这个语句识别为浮点型，数学计算的点<code>.</code>优先级最高，所以识别成浮点数，小数点后是字母是肯定报错的。</p></blockquote>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123.</span>toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 报错，Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure><p>String( )：将括号里的内容转换成字符串</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">String</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// string: 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">String</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num)+<span class="string">&#x27;: &#x27;</span>+num); <span class="comment">// string: true</span></span><br></pre></td></tr></table></figure><p>Boolean( )：转换成布尔值</p><ul><li>undefined / null / NaN / “” / 0 / false  -&gt; false </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// boolean: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Boolean</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// boolean: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Boolean</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num) + <span class="string">&#x27;: &#x27;</span> + num); <span class="comment">// boolean: true</span></span><br></pre></td></tr></table></figure><h3 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h3><p>内部原理：调用显示类型转换。原理：调用 Number( ) 方法转为数字，然后和 NaN 比对。</p><p><code>isNaN()</code> ：判断参数是不是 NaN，返回结果为 boolean 类型。</p><ul><li>常用转换：NaN / undefined / 字符串（除了字符串类型的数字） -&gt; NaN</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">123</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&#x27;aa&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>++/--</code>、<code>+/-</code>（一元正负）：转换为 number 类型。</p><ul><li>原理：调用 Number( )。</li><li>一元正负，只有一边有参数，如”+ a” / “- b”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">b++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b), b);<span class="comment">// number 124</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line">c--;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(c), c);<span class="comment">// number -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = +<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(d), d);<span class="comment">//number NaN</span></span><br></pre></td></tr></table></figure><p><code>+</code> (加号)：</p><ul><li>若加号两边存在一个字符串，将另一个也转为字符串，转为 string 类型。调用 String 方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> +<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// string 1abc</span></span><br></pre></td></tr></table></figure><ul><li>其他情况下（number / undefined / null / boolean），转为 number 类型。调用 Number 方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// number 1</span></span><br></pre></td></tr></table></figure><p><code>-、*、/、%</code>：转为 number 类型。原理：调用 Number 方法</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1&#x27;</span> * <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a), a);<span class="comment">// number 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span> / <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b), b);<span class="comment">// number 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;abc&#x27;</span> - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(c), c);<span class="comment">// number NaN</span></span><br></pre></td></tr></table></figure><p><code>&amp;&amp;、||</code>：过程中转为 boolean 类型进行比较，结果返回表达式的值（值本身是什么类型就返回什么类型）。</p><p><code>!</code>：结果返回 boolean 类型。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;abc&#x27;</span> &amp;&amp; <span class="number">2</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// number 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;abc&#x27;</span> &amp;&amp; <span class="string">&#x27;def&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// string def</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="literal">null</span> &amp;&amp; <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// object null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = !!<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);<span class="comment">// boolean true</span></span><br></pre></td></tr></table></figure><p><code>&lt;、&gt;、&lt;=、&gt;=</code> ：</p><ul><li>两边都是字符串时，比较 asc 码，返回 boolean 类型。</li><li>其他情况下，调用 Number( )，先转换为数字进行比较，结果返回 boolean 类型。</li><li>undefined 和 null 除外，见特殊情况。</li></ul><p><code>==、!=</code> ：若两边均为对象，对比它们的引用是否相同，返回 boolean 类型。其他情况下，调用 Number 方法，两边转为数字进行比较，结果返回 boolean 类型。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用值，两个不同的地址引用（不同房间）：</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; == &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一个地址引用：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj == obj1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>特殊情况：</p><ul><li>undefined 和 null 既不大于 0，也不小于 0，更不等于 0。</li><li><code>undefined == null</code></li><li><code>NaN !== NaN</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> &lt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &lt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>例：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// false == 0, true == 1, 0 &gt; 1 -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &gt; <span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先判断 1 &gt; 10 -&gt; false, false == 0, 0 &gt; 0 -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="number">10</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 &gt; 3 -&gt; false, false == 0, 0 &lt; 1 -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> &gt; <span class="number">3</span> &lt; <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>不发生类型转换：</p><ul><li><code>===</code></li><li><code>!==</code></li></ul><h3 id="常用转换汇总"><a href="#常用转换汇总" class="headerlink" title="常用转换汇总"></a>常用转换汇总</h3><p>Boolean()：undefined、null、NaN、””、0、false  -&gt; false</p><p>Number()：（千方百计变成数字）</p><ul><li>undefined / 字符串（除了字符串类型的数字）/ NaN -&gt; NaN</li><li>true -&gt; 1</li><li>false / “” / null -&gt; 0</li><li>“123” -&gt; 123 （字符串类型的数字直接转换类型，数值不变）</li></ul><p>parseInt (string, radix)：（只要整数，不管其他）</p><ul><li>“123.7” -&gt; 123</li><li>“123abc” -&gt; 123（首位是数字的话，从数字位开始看，在非数字位截断）</li><li>其他 -&gt; NaN</li></ul><p>例 1：关于 parseInt() 方法</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(<span class="string">&#x27;123abc&#x27;</span>), <span class="built_in">parseInt</span>(<span class="string">&#x27;123abc&#x27;</span>)); <span class="comment">// number 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;123.7&#x27;</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(<span class="literal">undefined</span>), <span class="built_in">parseInt</span>(<span class="literal">undefined</span>)); <span class="comment">// number NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">null</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">NaN</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;abc123&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">false</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>例 2：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="literal">false</span> + <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 0 + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="literal">false</span> == <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 0 !== 1 -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(demo); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="string">&#x27;11&#x27;</span> * <span class="number">2</span> == <span class="number">33</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">//          11 + 22 </span></span><br></pre></td></tr></table></figure><p>例 3:</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>); <span class="comment">// &#x27;NaN&#x27;</span></span><br><span class="line"><span class="comment">// 左边：typeof(a) -&gt; &#x27;undefined&#x27;</span></span><br><span class="line"><span class="comment">// &amp;&amp; 优先级低于算术运算符，放在最后处理</span></span><br><span class="line"><span class="comment">// 右边：-true + (+undefined) + &#x27;&#x27; -&gt; -1 + NaN + &#x27;&#x27; -&gt; NaN + &#x27;&#x27; -&gt; &#x27;NaN&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;undefined&#x27; &amp;&amp; &#x27;NaN&#x27;</span></span><br><span class="line"><span class="comment">// 一真返二</span></span><br><span class="line"><span class="comment">// &#x27;NaN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;是否能输出&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 条件内返回的是字符串的&#x27;NaN&#x27;，为 true，可以执行</span></span><br></pre></td></tr></table></figure><p>例 4:</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="string">&#x27; &#x27;</span> + !!<span class="string">&#x27;&#x27;</span> - !!<span class="literal">false</span> || <span class="built_in">console</span>.log(<span class="string">&#x27;能吗？&#x27;</span>);</span><br><span class="line"><span class="comment">// 左边：true + false - false -&gt; 1 + 0 - 0 = 1</span></span><br><span class="line"><span class="comment">// 1 为真，会直接返回 1，|| 后面的语句不会执行</span></span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>进制也就是进位计数制，是人为定义的带进位的计数方法。对于任何一种进制—— X 进制，就表示每一位置上的数运算时都是逢 X 进一位。 </p><p>十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，X 进制就是逢 X 进位。</p><p>比如十六进制：1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f。如果 f + 1，那么按照逢十六进一的规则，个位数变为 0，然后向前进一位，十位数变为 1。那么：f + 1 = 10，这里的 10（一零），就代表十进制里的 16。</p><p>比如二进制：0, 1。如果 1 + 1，按照逢二进一的规则，个位数变为 0 ，十位数变为 1，1 + 1 = 10，这里的 10（一零），代表十进制里的 2。</p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><blockquote><p>十进制 -&gt; X 进制：除。数除以 X，得商，接着用商除 X，直到商为 0，余数倒过来写。<br>X 进制 -&gt; 十进制：乘。从数的个位开始，依次乘以 X 的 0 次方，1 次方……，最后加起来。</p></blockquote><p>十进制 -&gt; 十六进制</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10 进制数：33</span><br><span class="line"></span><br><span class="line">33 / 16 = 2 ...... 1</span><br><span class="line"> 2 / 16 = 0 ...... 2</span><br><span class="line"></span><br><span class="line">转换成 16 进制数：21</span><br></pre></td></tr></table></figure><p>十六进制 -&gt; 十进制</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">16 进制数：21</span><br><span class="line"></span><br><span class="line">1 * 16⁰ + 2 * 16¹ = 33</span><br><span class="line"></span><br><span class="line">转换成 10 进制数：33</span><br></pre></td></tr></table></figure><p>十进制 -&gt; 八进制</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10 进制数：19</span><br><span class="line"></span><br><span class="line">19 / 8 = 2 ...... 3</span><br><span class="line"> 2 / 8 = 0 ...... 2</span><br><span class="line"></span><br><span class="line">转换成 8 进制数：23</span><br></pre></td></tr></table></figure><p>八进制 -&gt; 十进制<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8 进制数：23</span><br><span class="line"></span><br><span class="line">3 * 8⁰ + 2 * 8¹ = 19</span><br><span class="line"></span><br><span class="line">转换成 10 进制数：19</span><br></pre></td></tr></table></figure></p><p>十进制 -&gt; 二进制<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10 进制数：46</span><br><span class="line"></span><br><span class="line">46 / 2 = 23 ...... 0</span><br><span class="line">23 / 2 = 11 ...... 1</span><br><span class="line">11 / 2 =  5 ...... 1</span><br><span class="line">5  / 2 =  2 ...... 1</span><br><span class="line">2  / 2 =  1 ...... 0</span><br><span class="line">1  / 2 =  0 ...... 1</span><br><span class="line"></span><br><span class="line">转换成 2 进制数：101110</span><br></pre></td></tr></table></figure></p><p>二进制 -&gt; 十进制<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2 进制数：101110</span><br><span class="line"></span><br><span class="line">0 * 2⁰ + 1 * 2¹ + 1 * 2² + 1 * 2³ + 0 * 2⁴ + 1 * 2⁵ = 46</span><br><span class="line"></span><br><span class="line">转换成 10 进制数：46</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">数据类型的分类、判断与转换</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript笔记(一)基础知识</title>
    <link href="https://cnlmx.top/post/d459/"/>
    <id>https://cnlmx.top/post/d459/</id>
    <published>2019-07-03T13:17:25.000Z</published>
    <updated>2021-07-19T07:03:44.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>Mosaic 是互联网历史上第一个获普遍使用和能够显示图片的网页浏览器。于 1993 年问世。</p><p>浏览器组成：</p><ol><li>shell （外形）部分</li><li>内核部分：渲染引擎（语法规则和渲染），js 引擎，其他模块</li></ol><p>主流浏览器及其内核：</p><ol><li>IE          -&gt;       Trident</li><li>Chrome      -&gt;      Blink</li><li>Opera       -&gt;      Blink</li><li>Safari      -&gt;      Webkit</li><li>Firefox     -&gt;      Gecko</li></ol><p>2001 年的 IE6 浏览器，首次实现对 JavaScript 引擎的优化和分离。</p><p>2008 年 Google 发布最新浏览器 Chrome，它是采用优化后的 JavaScript 引擎，引擎代号 V8，因能把 JavaScript 代码直接转化为机械码来执行，进而以速度快而闻名。</p><h2 id="了解-JavaScript"><a href="#了解-JavaScript" class="headerlink" title="了解 JavaScript"></a>了解 JavaScript</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>编译型：C、C++ 等语言需要一个编译器（compiler）。编译器是一种程序，能够把用 Java 等高级语言编写出来的源代码翻译为直接在计算机上执行的文件。</p><p>解释型：不需要编译器，它们只需要解释器。对于 JavaScript，浏览器负责完成有关的解释和执行工作。</p><h3 id="编程形式"><a href="#编程形式" class="headerlink" title="编程形式"></a>编程形式</h3><ol><li><p>面向过程：C</p></li><li><p>面向对象：Java、C++</p></li><li><p>既面向对象也面向过程：JavaScript </p></li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>解释型语言 — （不需要编译成文件）跨平台。</p></li><li><p>单线程 — 同一时间只能干一件事。</p></li><li><p>弱类型语言 — 存放的数据类型可变。</p></li></ol><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p>我们把 JavaScript 中的核心部分称为 ECMAScript，加上 BOM（浏览器对象模型）与 DOM（文档对象类型），三者共同组成了 JavaScript。</p><ol><li>ECMA-262 标准规定了这门语言的如下组成部分：语法、类型、语句、关键字、保留字、操作符、对象。</li><li>浏览器对象模型（BOM，Browser Object Model），提供与浏览器交互的方法和接口。</li><li>文档对象内容（DOM，Document Object Model），提供访问和操作网页内容的方法和接口。</li></ol><h3 id="执行队列"><a href="#执行队列" class="headerlink" title="执行队列"></a>执行队列</h3><p>执行队列（过程）：轮转时间片。</p><ol><li>单线程模拟多线程。</li><li>类似吃饭，吃一口米饭，吃一口茄子，再吃一口排骨，再吃一口米饭，再吃一口米饭，再吃一口茄子，顺序完全随机，在足够快的时间内，肉眼可见菜和饭在同时减少。</li><li>比如 js 引擎要执行任务 1 和任务 2，js 引擎会把任务 1 和任务 2 切成无数个片段，然后把这些片段随机排成一个队列送入引擎执行，直到被执行完。</li></ol><blockquote><p>异步（asynchronous）：同时执行，类似于有很多条路一起走，可以同时出发。<br>同步（synchronous）：分次执行，类似于只有一条路走，这个走完了下个才能走。</p></blockquote><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>引入方法：</p><ol><li><p>页面内嵌<code>&lt;script&gt;&lt;/script&gt;</code>标签</p></li><li><p>外部引入<code>&lt;script src=location&gt;&lt;/script&gt;</code></p></li></ol><p>页面中，可以存在多个<code>&lt;script&gt;</code>标签，执行顺序从上到下。只要不存在 defer 和 async 属性，浏览器都会按照 它们在页面中出现的先后顺序依次进行解析。</p><p>传统的做法是所有<code>&lt;script&gt;</code>标签都放在<code>&lt;head&gt;</code>中，这意味着必须等到全部 js 代码都被下载、解析和执行完成以后，才能开始呈现页面的内容（浏览器在遇到<code>&lt;body&gt;</code>标签时才开始呈现内容）。</p><p>为了避免这个问题，现代 Web 应用程序一般都把全部 js 引用放在<code>&lt;body&gt;</code>中页面内容的后面。这样，在解析包含的 js 代码之前，页面的内容将完全呈现在浏览器中。而用户也会因为浏览器窗口显示空白页面的时间缩短而感到打开页面的速度加快了。</p><p>为符合 Web 标准中结构、样式、行为相分离的原则，通常会采用外部引入。</p><blockquote><p>如果有外部 js 文件，那么这个 script 标签里如果再写 js 代码，也是不会执行的，会被直接忽略。<br>基于这个特性，在开发时偶尔会用来存储一些代码。<br>在下面再写一个 script 标签，然后里面写代码是可以的。</p></blockquote><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>JavaScript 可正常计算的范围：小数点前 16 位，后 16 位。</p><p>js 计算精度不准，是纯粹的 bug，所以在 js 中应尽量避免小数操作。<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0.14</span> * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 14.000000000000002</span></span><br></pre></td></tr></table></figure></p><p>如果需要计算，那么采用<code>Math.floor()</code>（向下取整）或<code>Math.ceil()</code>（向上取整）方法。<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向上取整，无论小数是多少，都向前进 1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="number">123.234</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 124</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下取整，无论小数是多少，都不要了</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">Math</span>.floor(<span class="number">123.999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><p><code>Math.random()</code>方法可以随机产生一个 0 ～ 1 之间的开区间的数。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 0.4322440432127299</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 0.5216225452503296</span></span><br></pre></td></tr></table></figure><p><code>toFixed()</code>方法可以把 Number 四舍五入为指定小数位数的数字。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123.45678</span>;</span><br><span class="line">   </span><br><span class="line">demo = num.toFixed(<span class="number">2</span>);</span><br><span class="line">   </span><br><span class="line"><span class="built_in">console</span>.log(demo); <span class="comment">// 123.46</span></span><br></pre></td></tr></table></figure><h2 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h2><p>变量声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明、赋值分解</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单一 var</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span>,</span><br><span class="line">    b = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>开发规范：单一 var 模式，每个变量用逗号隔开，同时换行。</p><p>命名规则：</p><ol><li>变量名必须以<code>英文字母</code>、<code>_</code>、<code>$</code>开头</li><li>变量名可以包括<code>英文字母</code>、<code>_</code>、<code>$</code>、<code>数字</code></li><li>不可以用系统的关键字、保留字作为变量名。</li></ol><h2 id="语句基本规则"><a href="#语句基本规则" class="headerlink" title="语句基本规则"></a>语句基本规则</h2><p>语句后面要用分号<code>;</code>结束。注意，下列三种语句不用加分号：</p><ol><li>函数： function test() {}</li><li>for 循环：for() {}</li><li>if 语句：if() {}</li></ol><p>一个 HTML 文件中可以放多个 JS 代码块，代码块内的规则可以互通。如果某个代码块内出现 JS 语法错误，会引发该代码块内的后续代码终止，但不会影响其他 JS 代码块，目前有两种错误：</p><ol><li>低级错误：语法解析错误，整个代码块都不会执行。<br>如：使用了中文标点符号：Uncaught Syntax Error: ……</li><li>逻辑错误：标准错误，会执行到该代码块最后一行正确代码再终止。<br>如：没有声明变量，直接使用：Uncaught Reference Error: ……</li></ol><p>书写格式要规范，<code>=</code> <code>+</code> <code>/</code> <code>-</code>两边都应该有空格。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><code>+</code>:</p><ul><li>数学运算。</li><li>字符串连接：任何数据类型加字符串都等于字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从左至右运算</span></span><br><span class="line"><span class="comment">// 1+1 数字运算，得 2</span></span><br><span class="line"><span class="comment">// 2+&#x27;a&#x27; 字符串连接，得 2a</span></span><br><span class="line"><span class="comment">// &#x27;2a&#x27;+1 字符串连接，得 2a1</span></span><br><span class="line"><span class="comment">// 同理可得 2a11</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> + <span class="number">1</span> + <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 2a11</span></span><br></pre></td></tr></table></figure><p><code>-、*、/、%、=、()</code></p><p><code>+=、-=、/=、*=、%=</code></p><p><code>++</code>。先加加（减减）还是后加加（减减）是针对当前语句来说的。<code>++</code>放后面，意为先执行该条语句，然后再加加。<code>++</code>放前面，意为先加加，然后再执行该条语句。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a++); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 意为先执行 console.log(a)，执行完后 a++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时再看 a 的值，就是加完之后的了</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = ++a - <span class="number">1</span> + a++; </span><br><span class="line"></span><br><span class="line"><span class="comment">// ++a 先加后执行，10 + 1 = 11，a 的值变为 11</span></span><br><span class="line"><span class="comment">// a++ 先执行后加，a 现在的值为 11 ，故 a++ = 11</span></span><br><span class="line"><span class="comment">// b = 11 - 1 + 11 = 21</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a 两次自增，故值为 12</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p><code>--</code>。注意：有前自增（自减）操作符时，要先加加（减减），再执行该条语句。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a-- + --a; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 先算 --a，先减后执行，a = 1，自减后 a = 0</span></span><br><span class="line"><span class="comment">// 再算 a--，先执行后减，a = 0，故 a-- = 0</span></span><br><span class="line"><span class="comment">// b = 0 + 0 = 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a 两次自减，故值为 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><code>&gt;</code>、<code>&lt;</code>、<code>==</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code></p><p>比较结果为 boolean 值：true / false。</p><blockquote><p><code>==</code>是等于，而<code>=</code>是赋值。</p></blockquote><p>字符串的比较规则为 asc 码。如“A”的 asc 码为 65 ，“a”的 asc 码为 97。</p><p>字符串比较是按照顺序来的，如果运算符左边的字符串中顺位第一的字符小于右边字符串的第一位字符，那么左边直接就是小于右边；如果第一位相等，那就再看第二位。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读作字符串一零 &gt; 字符串二</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;10&#x27;</span> &gt; <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串‘1’的 asc 码为 49</span></span><br><span class="line"><span class="comment">// 字符串‘2’的 asc 码为 50</span></span><br><span class="line"><span class="comment">// 字符串‘3’的 asc 码为 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;3&#x27;</span> &gt; <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><code>&amp;&amp;</code>、<code>||</code>、<code>!</code></p><p>运算结果为真实的值</p><p>下面六个值转化为布尔值都是 false：<code>undefined、null、NaN、&quot;&quot;、0、flase</code>。</p><blockquote><p>NaN(Not a Number)：非数，是数字类型的一类值，意为不可表示的值。</p></blockquote><p><code>&amp;&amp;</code>在运行时，在碰到表达式的布尔值为假时，返回该表达式的值。</p><ul><li>多个表达式时，先看第一个表达式转换成布尔值的结果，若结果为真，接着看第二个表达式的布尔值，若第二个也为真，接着看第三个，依此类推，直到表达式的布尔值为 false，直接返回该表达式的值。即看到假，返回假。如果全为真，则返回最后一个表达式的值。</li><li>只有两个表达式时，若第一个表达式的布尔值为 true，返回第二个表达式的值。若第一个表达式为 false，直接返回第一个表达式原本的值。即一真返二。一假返一。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1 转化为 true，判断为真</span></span><br><span class="line"><span class="comment">// 第一个为 true，直接返回第二个表达式的值</span></span><br></pre></td></tr></table></figure><p>基于<code>&amp;&amp;</code>运算符的原理， 使它具备中断的作用，在实际开发中作为<strong>短路语句</strong>使用，它是 if 语句的简写形式，可以用来替代 if 语句：“如果…是真/假，那么…”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> &amp;&amp; <span class="built_in">document</span>.write(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 不会输出 a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果前面的数据正确，那么执行后面的语句</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">&#x27;团子很可爱&#x27;</span>); <span class="comment">// 团子很可爱</span></span><br></pre></td></tr></table></figure><p><code>||</code>与<code>&amp;&amp;</code>类似，只不过是碰到表达式的布尔值为真时，返回该表达式的值。</p><ul><li>多个表达式时，若第一个为假，则一直往下看，直到找到为真的表达式，然后返回该值。即看到真，返回真。如果全为假，则返回最后一个表达式的值。</li><li>两个表达式时，若第一个为假，直接返回第二个表达式的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> || <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>!</code>将表达式转换成布尔值再取反，然后输出布尔值。 </p><h3 id="其他：逗号运算符"><a href="#其他：逗号运算符" class="headerlink" title="其他：逗号运算符"></a>其他：逗号运算符</h3><p>形式：(表达式1，表达式2，表达式3………….)<br>作用：通常与小括号<code>()</code>一起使用，逗号<code>,</code>用于连接算式<br>运算规则：对每个操作对象求值（从左至右），返回最后一个操作对象的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>,</span><br><span class="line">      b = <span class="number">20</span>,</span><br><span class="line">      result = (a++, a + b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log (result); <span class="comment">// 31 </span></span><br><span class="line"><span class="built_in">console</span>.log (a); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log (b); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><blockquote><p>查询<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">运算符优先级</a>。</p></blockquote><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h3><p><code>if (条件判断) &#123;执行语句&#125;</code></p><p><code>if () &#123;&#125; else if () &#123;&#125;</code></p><p><code>if () &#123;&#125;</code>&lt;—&gt; <code>&amp;&amp;</code>转换</p><h3 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h3><p>for 循环执行顺序：</p><ul><li>先执行一遍 (1) ：<code>var i = 0</code></li><li>判断 (2) -&gt; 执行语句 (3)：<code>if(i &lt; 10)&#123;console.log(&#39;a&#39;);&#125;</code></li><li>执行 (4)：<code>i++ -&gt; i = 1</code></li><li>判断 (2) -&gt; 执行语句 (3)</li><li>执行 (4)：<code>i++ -&gt; i = 2</code></li><li>判断 (2) -&gt; 执行语句 (3)</li><li>执行 (4)：<code>i++ -&gt; i = 3</code><br>…</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//       (1)      (2)   (4)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);             <span class="comment">// (3)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;                          <span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; ) &#123;                  <span class="comment">// (2)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);             <span class="comment">// (3)</span></span><br><span class="line">      i++;                          <span class="comment">// (4)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>无论 for 语句中写的是什么，都会按照这个执行顺序执行。</p></blockquote><p>while</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do while（很少用）</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><p>格式：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (条件) &#123;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">1</span>:                        <span class="comment">// 结果与条件进行判断（比对）</span></span><br><span class="line">        执行语句;                       <span class="comment">// 满足即执行该语句</span></span><br><span class="line">        <span class="keyword">break</span>;                        <span class="comment">// 执行后结束</span></span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">2</span>: </span><br><span class="line">        执行语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">3</span>: </span><br><span class="line">        执行语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 的条件和 case 的结果比对，如果是一样的，就执行。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="built_in">window</span>.prompt(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> (date) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;monday&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;tuesday&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;wednesday&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;thursday&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;friday&#x27;</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;working&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;周六&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;周日&#x27;</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;relaxing&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 case 的结果是表达式时，比较的就是表达式的返回值。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>,</span><br><span class="line">    greeting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;                           <span class="comment">// 条件</span></span><br><span class="line">    <span class="keyword">case</span> age &lt; <span class="number">18</span>:                        <span class="comment">// 结果1</span></span><br><span class="line">        greeting = <span class="string">&#x27;同学&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">40</span>:             <span class="comment">// 结果2</span></span><br><span class="line">        greeting = <span class="string">&#x27;先生&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> age &gt;= <span class="number">40</span>:</span><br><span class="line">        greeting = <span class="string">&#x27;前辈&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">        greeting = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(greeting); <span class="comment">// &#x27;先生&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>break：终止循环。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 这个 break 能执行是因为最外有一层 for 循环，如果只有 if 语句，是肯定报错的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>break 必须写在循环里面，否则会报错。</p></blockquote><p>continue：终止本次循环，直接进行下一次循环。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> === <span class="number">0</span> || i % <span class="number">10</span> === <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">浏览器的发展与起源｜声明变量｜使用运算符和语句</summary>
    
    
    
    <category term="学习笔记" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ECMAScript/"/>
    
    
    <category term="前端" scheme="https://cnlmx.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://cnlmx.top/tags/JavaScript/"/>
    
    <category term="ECMAScript" scheme="https://cnlmx.top/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cnlmx.top/post/3eeb/"/>
    <id>https://cnlmx.top/post/3eeb/</id>
    <published>2019-02-26T04:54:59.517Z</published>
    <updated>2021-07-18T15:03:53.289Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Hexo! </p><span id="more"></span><p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to Hexo! &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
